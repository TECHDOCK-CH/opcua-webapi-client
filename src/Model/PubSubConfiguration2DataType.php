<?php
/**
 * PubSubConfiguration2DataType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * PubSubConfiguration2DataType Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.12/#6.2.12.4).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PubSubConfiguration2DataType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PubSubConfiguration2DataType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscribed_data_sets' => '\TechDock\OpcUaWebApiClient\Model\StandaloneSubscribedDataSetDataType[]',
        'data_set_classes' => '\TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType[]',
        'default_security_key_services' => '\TechDock\OpcUaWebApiClient\Model\EndpointDescription[]',
        'security_groups' => '\TechDock\OpcUaWebApiClient\Model\SecurityGroupDataType[]',
        'pub_sub_key_push_targets' => '\TechDock\OpcUaWebApiClient\Model\PubSubKeyPushTargetDataType[]',
        'configuration_version' => 'int',
        'configuration_properties' => '\TechDock\OpcUaWebApiClient\Model\KeyValuePair[]',
        'published_data_sets' => '\TechDock\OpcUaWebApiClient\Model\PublishedDataSetDataType[]',
        'connections' => '\TechDock\OpcUaWebApiClient\Model\PubSubConnectionDataType[]',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subscribed_data_sets' => null,
        'data_set_classes' => null,
        'default_security_key_services' => null,
        'security_groups' => null,
        'pub_sub_key_push_targets' => null,
        'configuration_version' => 'int64',
        'configuration_properties' => null,
        'published_data_sets' => null,
        'connections' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subscribed_data_sets' => false,
        'data_set_classes' => false,
        'default_security_key_services' => false,
        'security_groups' => false,
        'pub_sub_key_push_targets' => false,
        'configuration_version' => false,
        'configuration_properties' => false,
        'published_data_sets' => false,
        'connections' => false,
        'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscribed_data_sets' => 'SubscribedDataSets',
        'data_set_classes' => 'DataSetClasses',
        'default_security_key_services' => 'DefaultSecurityKeyServices',
        'security_groups' => 'SecurityGroups',
        'pub_sub_key_push_targets' => 'PubSubKeyPushTargets',
        'configuration_version' => 'ConfigurationVersion',
        'configuration_properties' => 'ConfigurationProperties',
        'published_data_sets' => 'PublishedDataSets',
        'connections' => 'Connections',
        'enabled' => 'Enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscribed_data_sets' => 'setSubscribedDataSets',
        'data_set_classes' => 'setDataSetClasses',
        'default_security_key_services' => 'setDefaultSecurityKeyServices',
        'security_groups' => 'setSecurityGroups',
        'pub_sub_key_push_targets' => 'setPubSubKeyPushTargets',
        'configuration_version' => 'setConfigurationVersion',
        'configuration_properties' => 'setConfigurationProperties',
        'published_data_sets' => 'setPublishedDataSets',
        'connections' => 'setConnections',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscribed_data_sets' => 'getSubscribedDataSets',
        'data_set_classes' => 'getDataSetClasses',
        'default_security_key_services' => 'getDefaultSecurityKeyServices',
        'security_groups' => 'getSecurityGroups',
        'pub_sub_key_push_targets' => 'getPubSubKeyPushTargets',
        'configuration_version' => 'getConfigurationVersion',
        'configuration_properties' => 'getConfigurationProperties',
        'published_data_sets' => 'getPublishedDataSets',
        'connections' => 'getConnections',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subscribed_data_sets', $data ?? [], null);
        $this->setIfExists('data_set_classes', $data ?? [], null);
        $this->setIfExists('default_security_key_services', $data ?? [], null);
        $this->setIfExists('security_groups', $data ?? [], null);
        $this->setIfExists('pub_sub_key_push_targets', $data ?? [], null);
        $this->setIfExists('configuration_version', $data ?? [], 0);
        $this->setIfExists('configuration_properties', $data ?? [], null);
        $this->setIfExists('published_data_sets', $data ?? [], null);
        $this->setIfExists('connections', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['configuration_version']) && ($this->container['configuration_version'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'configuration_version', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['configuration_version']) && ($this->container['configuration_version'] < 0)) {
            $invalidProperties[] = "invalid value for 'configuration_version', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscribed_data_sets
     *
     * @return \TechDock\OpcUaWebApiClient\Model\StandaloneSubscribedDataSetDataType[]|null
     */
    public function getSubscribedDataSets()
    {
        return $this->container['subscribed_data_sets'];
    }

    /**
     * Sets subscribed_data_sets
     *
     * @param \TechDock\OpcUaWebApiClient\Model\StandaloneSubscribedDataSetDataType[]|null $subscribed_data_sets subscribed_data_sets
     *
     * @return self
     */
    public function setSubscribedDataSets($subscribed_data_sets)
    {
        if (is_null($subscribed_data_sets)) {
            throw new \InvalidArgumentException('non-nullable subscribed_data_sets cannot be null');
        }
        $this->container['subscribed_data_sets'] = $subscribed_data_sets;

        return $this;
    }

    /**
     * Gets data_set_classes
     *
     * @return \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType[]|null
     */
    public function getDataSetClasses()
    {
        return $this->container['data_set_classes'];
    }

    /**
     * Sets data_set_classes
     *
     * @param \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType[]|null $data_set_classes data_set_classes
     *
     * @return self
     */
    public function setDataSetClasses($data_set_classes)
    {
        if (is_null($data_set_classes)) {
            throw new \InvalidArgumentException('non-nullable data_set_classes cannot be null');
        }
        $this->container['data_set_classes'] = $data_set_classes;

        return $this;
    }

    /**
     * Gets default_security_key_services
     *
     * @return \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null
     */
    public function getDefaultSecurityKeyServices()
    {
        return $this->container['default_security_key_services'];
    }

    /**
     * Sets default_security_key_services
     *
     * @param \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null $default_security_key_services default_security_key_services
     *
     * @return self
     */
    public function setDefaultSecurityKeyServices($default_security_key_services)
    {
        if (is_null($default_security_key_services)) {
            throw new \InvalidArgumentException('non-nullable default_security_key_services cannot be null');
        }
        $this->container['default_security_key_services'] = $default_security_key_services;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SecurityGroupDataType[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SecurityGroupDataType[]|null $security_groups security_groups
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {
        if (is_null($security_groups)) {
            throw new \InvalidArgumentException('non-nullable security_groups cannot be null');
        }
        $this->container['security_groups'] = $security_groups;

        return $this;
    }

    /**
     * Gets pub_sub_key_push_targets
     *
     * @return \TechDock\OpcUaWebApiClient\Model\PubSubKeyPushTargetDataType[]|null
     */
    public function getPubSubKeyPushTargets()
    {
        return $this->container['pub_sub_key_push_targets'];
    }

    /**
     * Sets pub_sub_key_push_targets
     *
     * @param \TechDock\OpcUaWebApiClient\Model\PubSubKeyPushTargetDataType[]|null $pub_sub_key_push_targets pub_sub_key_push_targets
     *
     * @return self
     */
    public function setPubSubKeyPushTargets($pub_sub_key_push_targets)
    {
        if (is_null($pub_sub_key_push_targets)) {
            throw new \InvalidArgumentException('non-nullable pub_sub_key_push_targets cannot be null');
        }
        $this->container['pub_sub_key_push_targets'] = $pub_sub_key_push_targets;

        return $this;
    }

    /**
     * Gets configuration_version
     *
     * @return int|null
     */
    public function getConfigurationVersion()
    {
        return $this->container['configuration_version'];
    }

    /**
     * Sets configuration_version
     *
     * @param int|null $configuration_version configuration_version
     *
     * @return self
     */
    public function setConfigurationVersion($configuration_version)
    {
        if (is_null($configuration_version)) {
            throw new \InvalidArgumentException('non-nullable configuration_version cannot be null');
        }

        if (($configuration_version > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $configuration_version when calling PubSubConfiguration2DataType., must be smaller than or equal to 4294967295.');
        }
        if (($configuration_version < 0)) {
            throw new \InvalidArgumentException('invalid value for $configuration_version when calling PubSubConfiguration2DataType., must be bigger than or equal to 0.');
        }

        $this->container['configuration_version'] = $configuration_version;

        return $this;
    }

    /**
     * Gets configuration_properties
     *
     * @return \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null
     */
    public function getConfigurationProperties()
    {
        return $this->container['configuration_properties'];
    }

    /**
     * Sets configuration_properties
     *
     * @param \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null $configuration_properties configuration_properties
     *
     * @return self
     */
    public function setConfigurationProperties($configuration_properties)
    {
        if (is_null($configuration_properties)) {
            throw new \InvalidArgumentException('non-nullable configuration_properties cannot be null');
        }
        $this->container['configuration_properties'] = $configuration_properties;

        return $this;
    }

    /**
     * Gets published_data_sets
     *
     * @return \TechDock\OpcUaWebApiClient\Model\PublishedDataSetDataType[]|null
     */
    public function getPublishedDataSets()
    {
        return $this->container['published_data_sets'];
    }

    /**
     * Sets published_data_sets
     *
     * @param \TechDock\OpcUaWebApiClient\Model\PublishedDataSetDataType[]|null $published_data_sets published_data_sets
     *
     * @return self
     */
    public function setPublishedDataSets($published_data_sets)
    {
        if (is_null($published_data_sets)) {
            throw new \InvalidArgumentException('non-nullable published_data_sets cannot be null');
        }
        $this->container['published_data_sets'] = $published_data_sets;

        return $this;
    }

    /**
     * Gets connections
     *
     * @return \TechDock\OpcUaWebApiClient\Model\PubSubConnectionDataType[]|null
     */
    public function getConnections()
    {
        return $this->container['connections'];
    }

    /**
     * Sets connections
     *
     * @param \TechDock\OpcUaWebApiClient\Model\PubSubConnectionDataType[]|null $connections connections
     *
     * @return self
     */
    public function setConnections($connections)
    {
        if (is_null($connections)) {
            throw new \InvalidArgumentException('non-nullable connections cannot be null');
        }
        $this->container['connections'] = $connections;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


