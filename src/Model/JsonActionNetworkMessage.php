<?php
/**
 * JsonActionNetworkMessage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * JsonActionNetworkMessage Class Doc Comment
 *
 * @category Class
 * @description [Link to specification]().
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JsonActionNetworkMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JsonActionNetworkMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_id' => 'string',
        'message_type' => 'string',
        'publisher_id' => 'string',
        'timestamp' => '\DateTime',
        'response_address' => 'string',
        'correlation_data' => 'string',
        'requestor_id' => 'string',
        'timeout_hint' => 'float',
        'messages' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_id' => null,
        'message_type' => null,
        'publisher_id' => null,
        'timestamp' => 'date-time',
        'response_address' => null,
        'correlation_data' => 'byte',
        'requestor_id' => null,
        'timeout_hint' => 'double',
        'messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message_id' => false,
        'message_type' => false,
        'publisher_id' => false,
        'timestamp' => false,
        'response_address' => false,
        'correlation_data' => false,
        'requestor_id' => false,
        'timeout_hint' => false,
        'messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_id' => 'MessageId',
        'message_type' => 'MessageType',
        'publisher_id' => 'PublisherId',
        'timestamp' => 'Timestamp',
        'response_address' => 'ResponseAddress',
        'correlation_data' => 'CorrelationData',
        'requestor_id' => 'RequestorId',
        'timeout_hint' => 'TimeoutHint',
        'messages' => 'Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_id' => 'setMessageId',
        'message_type' => 'setMessageType',
        'publisher_id' => 'setPublisherId',
        'timestamp' => 'setTimestamp',
        'response_address' => 'setResponseAddress',
        'correlation_data' => 'setCorrelationData',
        'requestor_id' => 'setRequestorId',
        'timeout_hint' => 'setTimeoutHint',
        'messages' => 'setMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_id' => 'getMessageId',
        'message_type' => 'getMessageType',
        'publisher_id' => 'getPublisherId',
        'timestamp' => 'getTimestamp',
        'response_address' => 'getResponseAddress',
        'correlation_data' => 'getCorrelationData',
        'requestor_id' => 'getRequestorId',
        'timeout_hint' => 'getTimeoutHint',
        'messages' => 'getMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('message_id', $data ?? [], null);
        $this->setIfExists('message_type', $data ?? [], null);
        $this->setIfExists('publisher_id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('response_address', $data ?? [], null);
        $this->setIfExists('correlation_data', $data ?? [], null);
        $this->setIfExists('requestor_id', $data ?? [], null);
        $this->setIfExists('timeout_hint', $data ?? [], 0);
        $this->setIfExists('messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_id
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string|null $message_id message_id
     *
     * @return self
     */
    public function setMessageId($message_id)
    {
        if (is_null($message_id)) {
            throw new \InvalidArgumentException('non-nullable message_id cannot be null');
        }
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string|null
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string|null $message_type message_type
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        if (is_null($message_type)) {
            throw new \InvalidArgumentException('non-nullable message_type cannot be null');
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return string|null
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param string|null $publisher_id publisher_id
     *
     * @return self
     */
    public function setPublisherId($publisher_id)
    {
        if (is_null($publisher_id)) {
            throw new \InvalidArgumentException('non-nullable publisher_id cannot be null');
        }
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets response_address
     *
     * @return string|null
     */
    public function getResponseAddress()
    {
        return $this->container['response_address'];
    }

    /**
     * Sets response_address
     *
     * @param string|null $response_address response_address
     *
     * @return self
     */
    public function setResponseAddress($response_address)
    {
        if (is_null($response_address)) {
            throw new \InvalidArgumentException('non-nullable response_address cannot be null');
        }
        $this->container['response_address'] = $response_address;

        return $this;
    }

    /**
     * Gets correlation_data
     *
     * @return string|null
     */
    public function getCorrelationData()
    {
        return $this->container['correlation_data'];
    }

    /**
     * Sets correlation_data
     *
     * @param string|null $correlation_data correlation_data
     *
     * @return self
     */
    public function setCorrelationData($correlation_data)
    {
        if (is_null($correlation_data)) {
            throw new \InvalidArgumentException('non-nullable correlation_data cannot be null');
        }
        $this->container['correlation_data'] = $correlation_data;

        return $this;
    }

    /**
     * Gets requestor_id
     *
     * @return string|null
     */
    public function getRequestorId()
    {
        return $this->container['requestor_id'];
    }

    /**
     * Sets requestor_id
     *
     * @param string|null $requestor_id requestor_id
     *
     * @return self
     */
    public function setRequestorId($requestor_id)
    {
        if (is_null($requestor_id)) {
            throw new \InvalidArgumentException('non-nullable requestor_id cannot be null');
        }
        $this->container['requestor_id'] = $requestor_id;

        return $this;
    }

    /**
     * Gets timeout_hint
     *
     * @return float|null
     */
    public function getTimeoutHint()
    {
        return $this->container['timeout_hint'];
    }

    /**
     * Sets timeout_hint
     *
     * @param float|null $timeout_hint timeout_hint
     *
     * @return self
     */
    public function setTimeoutHint($timeout_hint)
    {
        if (is_null($timeout_hint)) {
            throw new \InvalidArgumentException('non-nullable timeout_hint cannot be null');
        }
        $this->container['timeout_hint'] = $timeout_hint;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return object[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param object[]|null $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


