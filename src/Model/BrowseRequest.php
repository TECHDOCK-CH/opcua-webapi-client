<?php
/**
 * BrowseRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * BrowseRequest Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BrowseRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BrowseRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_header' => '\TechDock\OpcUaWebApiClient\Model\RequestHeader',
        'view' => '\TechDock\OpcUaWebApiClient\Model\ViewDescription',
        'requested_max_references_per_node' => 'int',
        'nodes_to_browse' => '\TechDock\OpcUaWebApiClient\Model\BrowseDescription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_header' => null,
        'view' => null,
        'requested_max_references_per_node' => 'int64',
        'nodes_to_browse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_header' => false,
        'view' => false,
        'requested_max_references_per_node' => false,
        'nodes_to_browse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_header' => 'RequestHeader',
        'view' => 'View',
        'requested_max_references_per_node' => 'RequestedMaxReferencesPerNode',
        'nodes_to_browse' => 'NodesToBrowse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_header' => 'setRequestHeader',
        'view' => 'setView',
        'requested_max_references_per_node' => 'setRequestedMaxReferencesPerNode',
        'nodes_to_browse' => 'setNodesToBrowse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_header' => 'getRequestHeader',
        'view' => 'getView',
        'requested_max_references_per_node' => 'getRequestedMaxReferencesPerNode',
        'nodes_to_browse' => 'getNodesToBrowse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_header', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
        $this->setIfExists('requested_max_references_per_node', $data ?? [], 0);
        $this->setIfExists('nodes_to_browse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['requested_max_references_per_node']) && ($this->container['requested_max_references_per_node'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'requested_max_references_per_node', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['requested_max_references_per_node']) && ($this->container['requested_max_references_per_node'] < 0)) {
            $invalidProperties[] = "invalid value for 'requested_max_references_per_node', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_header
     *
     * @return \TechDock\OpcUaWebApiClient\Model\RequestHeader|null
     */
    public function getRequestHeader()
    {
        return $this->container['request_header'];
    }

    /**
     * Sets request_header
     *
     * @param \TechDock\OpcUaWebApiClient\Model\RequestHeader|null $request_header request_header
     *
     * @return self
     */
    public function setRequestHeader($request_header)
    {
        if (is_null($request_header)) {
            throw new \InvalidArgumentException('non-nullable request_header cannot be null');
        }
        $this->container['request_header'] = $request_header;

        return $this;
    }

    /**
     * Gets view
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ViewDescription|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ViewDescription|null $view view
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets requested_max_references_per_node
     *
     * @return int|null
     */
    public function getRequestedMaxReferencesPerNode()
    {
        return $this->container['requested_max_references_per_node'];
    }

    /**
     * Sets requested_max_references_per_node
     *
     * @param int|null $requested_max_references_per_node requested_max_references_per_node
     *
     * @return self
     */
    public function setRequestedMaxReferencesPerNode($requested_max_references_per_node)
    {
        if (is_null($requested_max_references_per_node)) {
            throw new \InvalidArgumentException('non-nullable requested_max_references_per_node cannot be null');
        }

        if (($requested_max_references_per_node > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $requested_max_references_per_node when calling BrowseRequest., must be smaller than or equal to 4294967295.');
        }
        if (($requested_max_references_per_node < 0)) {
            throw new \InvalidArgumentException('invalid value for $requested_max_references_per_node when calling BrowseRequest., must be bigger than or equal to 0.');
        }

        $this->container['requested_max_references_per_node'] = $requested_max_references_per_node;

        return $this;
    }

    /**
     * Gets nodes_to_browse
     *
     * @return \TechDock\OpcUaWebApiClient\Model\BrowseDescription[]|null
     */
    public function getNodesToBrowse()
    {
        return $this->container['nodes_to_browse'];
    }

    /**
     * Sets nodes_to_browse
     *
     * @param \TechDock\OpcUaWebApiClient\Model\BrowseDescription[]|null $nodes_to_browse nodes_to_browse
     *
     * @return self
     */
    public function setNodesToBrowse($nodes_to_browse)
    {
        if (is_null($nodes_to_browse)) {
            throw new \InvalidArgumentException('non-nullable nodes_to_browse cannot be null');
        }
        $this->container['nodes_to_browse'] = $nodes_to_browse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


