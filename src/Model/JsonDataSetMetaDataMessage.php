<?php
/**
 * JsonDataSetMetaDataMessage
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * JsonDataSetMetaDataMessage Class Doc Comment
 *
 * @category Class
 * @description [Link to specification]().
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JsonDataSetMetaDataMessage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JsonDataSetMetaDataMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_id' => 'string',
        'message_type' => 'string',
        'publisher_id' => 'string',
        'data_set_writer_id' => 'int',
        'writer_group_name' => 'string',
        'data_set_writer_name' => 'string',
        'timestamp' => '\DateTime',
        'meta_data' => '\TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'message_id' => null,
        'message_type' => null,
        'publisher_id' => null,
        'data_set_writer_id' => 'int32',
        'writer_group_name' => null,
        'data_set_writer_name' => null,
        'timestamp' => 'date-time',
        'meta_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'message_id' => false,
        'message_type' => false,
        'publisher_id' => false,
        'data_set_writer_id' => false,
        'writer_group_name' => false,
        'data_set_writer_name' => false,
        'timestamp' => false,
        'meta_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_id' => 'MessageId',
        'message_type' => 'MessageType',
        'publisher_id' => 'PublisherId',
        'data_set_writer_id' => 'DataSetWriterId',
        'writer_group_name' => 'WriterGroupName',
        'data_set_writer_name' => 'DataSetWriterName',
        'timestamp' => 'Timestamp',
        'meta_data' => 'MetaData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_id' => 'setMessageId',
        'message_type' => 'setMessageType',
        'publisher_id' => 'setPublisherId',
        'data_set_writer_id' => 'setDataSetWriterId',
        'writer_group_name' => 'setWriterGroupName',
        'data_set_writer_name' => 'setDataSetWriterName',
        'timestamp' => 'setTimestamp',
        'meta_data' => 'setMetaData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_id' => 'getMessageId',
        'message_type' => 'getMessageType',
        'publisher_id' => 'getPublisherId',
        'data_set_writer_id' => 'getDataSetWriterId',
        'writer_group_name' => 'getWriterGroupName',
        'data_set_writer_name' => 'getDataSetWriterName',
        'timestamp' => 'getTimestamp',
        'meta_data' => 'getMetaData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('message_id', $data ?? [], null);
        $this->setIfExists('message_type', $data ?? [], null);
        $this->setIfExists('publisher_id', $data ?? [], null);
        $this->setIfExists('data_set_writer_id', $data ?? [], 0);
        $this->setIfExists('writer_group_name', $data ?? [], null);
        $this->setIfExists('data_set_writer_name', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['data_set_writer_id']) && ($this->container['data_set_writer_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'data_set_writer_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['data_set_writer_id']) && ($this->container['data_set_writer_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'data_set_writer_id', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_id
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string|null $message_id message_id
     *
     * @return self
     */
    public function setMessageId($message_id)
    {
        if (is_null($message_id)) {
            throw new \InvalidArgumentException('non-nullable message_id cannot be null');
        }
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return string|null
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param string|null $message_type message_type
     *
     * @return self
     */
    public function setMessageType($message_type)
    {
        if (is_null($message_type)) {
            throw new \InvalidArgumentException('non-nullable message_type cannot be null');
        }
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return string|null
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param string|null $publisher_id publisher_id
     *
     * @return self
     */
    public function setPublisherId($publisher_id)
    {
        if (is_null($publisher_id)) {
            throw new \InvalidArgumentException('non-nullable publisher_id cannot be null');
        }
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets data_set_writer_id
     *
     * @return int|null
     */
    public function getDataSetWriterId()
    {
        return $this->container['data_set_writer_id'];
    }

    /**
     * Sets data_set_writer_id
     *
     * @param int|null $data_set_writer_id data_set_writer_id
     *
     * @return self
     */
    public function setDataSetWriterId($data_set_writer_id)
    {
        if (is_null($data_set_writer_id)) {
            throw new \InvalidArgumentException('non-nullable data_set_writer_id cannot be null');
        }

        if (($data_set_writer_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $data_set_writer_id when calling JsonDataSetMetaDataMessage., must be smaller than or equal to 65535.');
        }
        if (($data_set_writer_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $data_set_writer_id when calling JsonDataSetMetaDataMessage., must be bigger than or equal to 0.');
        }

        $this->container['data_set_writer_id'] = $data_set_writer_id;

        return $this;
    }

    /**
     * Gets writer_group_name
     *
     * @return string|null
     */
    public function getWriterGroupName()
    {
        return $this->container['writer_group_name'];
    }

    /**
     * Sets writer_group_name
     *
     * @param string|null $writer_group_name writer_group_name
     *
     * @return self
     */
    public function setWriterGroupName($writer_group_name)
    {
        if (is_null($writer_group_name)) {
            throw new \InvalidArgumentException('non-nullable writer_group_name cannot be null');
        }
        $this->container['writer_group_name'] = $writer_group_name;

        return $this;
    }

    /**
     * Gets data_set_writer_name
     *
     * @return string|null
     */
    public function getDataSetWriterName()
    {
        return $this->container['data_set_writer_name'];
    }

    /**
     * Sets data_set_writer_name
     *
     * @param string|null $data_set_writer_name data_set_writer_name
     *
     * @return self
     */
    public function setDataSetWriterName($data_set_writer_name)
    {
        if (is_null($data_set_writer_name)) {
            throw new \InvalidArgumentException('non-nullable data_set_writer_name cannot be null');
        }
        $this->container['data_set_writer_name'] = $data_set_writer_name;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


