<?php
/**
 * CreateSessionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * CreateSessionResponse Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSessionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSessionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'response_header' => '\TechDock\OpcUaWebApiClient\Model\ResponseHeader',
        'session_id' => 'string',
        'authentication_token' => 'string',
        'revised_session_timeout' => 'float',
        'server_nonce' => 'string',
        'server_certificate' => 'string',
        'server_endpoints' => '\TechDock\OpcUaWebApiClient\Model\EndpointDescription[]',
        'server_software_certificates' => '\TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]',
        'server_signature' => '\TechDock\OpcUaWebApiClient\Model\SignatureData',
        'max_request_message_size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'response_header' => null,
        'session_id' => 'UaNodeId',
        'authentication_token' => 'UaNodeId',
        'revised_session_timeout' => 'double',
        'server_nonce' => 'byte',
        'server_certificate' => 'byte',
        'server_endpoints' => null,
        'server_software_certificates' => null,
        'server_signature' => null,
        'max_request_message_size' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'response_header' => false,
        'session_id' => false,
        'authentication_token' => false,
        'revised_session_timeout' => false,
        'server_nonce' => false,
        'server_certificate' => false,
        'server_endpoints' => false,
        'server_software_certificates' => false,
        'server_signature' => false,
        'max_request_message_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'response_header' => 'ResponseHeader',
        'session_id' => 'SessionId',
        'authentication_token' => 'AuthenticationToken',
        'revised_session_timeout' => 'RevisedSessionTimeout',
        'server_nonce' => 'ServerNonce',
        'server_certificate' => 'ServerCertificate',
        'server_endpoints' => 'ServerEndpoints',
        'server_software_certificates' => 'ServerSoftwareCertificates',
        'server_signature' => 'ServerSignature',
        'max_request_message_size' => 'MaxRequestMessageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'response_header' => 'setResponseHeader',
        'session_id' => 'setSessionId',
        'authentication_token' => 'setAuthenticationToken',
        'revised_session_timeout' => 'setRevisedSessionTimeout',
        'server_nonce' => 'setServerNonce',
        'server_certificate' => 'setServerCertificate',
        'server_endpoints' => 'setServerEndpoints',
        'server_software_certificates' => 'setServerSoftwareCertificates',
        'server_signature' => 'setServerSignature',
        'max_request_message_size' => 'setMaxRequestMessageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'response_header' => 'getResponseHeader',
        'session_id' => 'getSessionId',
        'authentication_token' => 'getAuthenticationToken',
        'revised_session_timeout' => 'getRevisedSessionTimeout',
        'server_nonce' => 'getServerNonce',
        'server_certificate' => 'getServerCertificate',
        'server_endpoints' => 'getServerEndpoints',
        'server_software_certificates' => 'getServerSoftwareCertificates',
        'server_signature' => 'getServerSignature',
        'max_request_message_size' => 'getMaxRequestMessageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('response_header', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('authentication_token', $data ?? [], null);
        $this->setIfExists('revised_session_timeout', $data ?? [], 0);
        $this->setIfExists('server_nonce', $data ?? [], null);
        $this->setIfExists('server_certificate', $data ?? [], null);
        $this->setIfExists('server_endpoints', $data ?? [], null);
        $this->setIfExists('server_software_certificates', $data ?? [], null);
        $this->setIfExists('server_signature', $data ?? [], null);
        $this->setIfExists('max_request_message_size', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['max_request_message_size']) && ($this->container['max_request_message_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_request_message_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_request_message_size']) && ($this->container['max_request_message_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_request_message_size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_header
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ResponseHeader|null
     */
    public function getResponseHeader()
    {
        return $this->container['response_header'];
    }

    /**
     * Sets response_header
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ResponseHeader|null $response_header response_header
     *
     * @return self
     */
    public function setResponseHeader($response_header)
    {
        if (is_null($response_header)) {
            throw new \InvalidArgumentException('non-nullable response_header cannot be null');
        }
        $this->container['response_header'] = $response_header;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id session_id
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets authentication_token
     *
     * @return string|null
     */
    public function getAuthenticationToken()
    {
        return $this->container['authentication_token'];
    }

    /**
     * Sets authentication_token
     *
     * @param string|null $authentication_token authentication_token
     *
     * @return self
     */
    public function setAuthenticationToken($authentication_token)
    {
        if (is_null($authentication_token)) {
            throw new \InvalidArgumentException('non-nullable authentication_token cannot be null');
        }
        $this->container['authentication_token'] = $authentication_token;

        return $this;
    }

    /**
     * Gets revised_session_timeout
     *
     * @return float|null
     */
    public function getRevisedSessionTimeout()
    {
        return $this->container['revised_session_timeout'];
    }

    /**
     * Sets revised_session_timeout
     *
     * @param float|null $revised_session_timeout revised_session_timeout
     *
     * @return self
     */
    public function setRevisedSessionTimeout($revised_session_timeout)
    {
        if (is_null($revised_session_timeout)) {
            throw new \InvalidArgumentException('non-nullable revised_session_timeout cannot be null');
        }
        $this->container['revised_session_timeout'] = $revised_session_timeout;

        return $this;
    }

    /**
     * Gets server_nonce
     *
     * @return string|null
     */
    public function getServerNonce()
    {
        return $this->container['server_nonce'];
    }

    /**
     * Sets server_nonce
     *
     * @param string|null $server_nonce server_nonce
     *
     * @return self
     */
    public function setServerNonce($server_nonce)
    {
        if (is_null($server_nonce)) {
            throw new \InvalidArgumentException('non-nullable server_nonce cannot be null');
        }
        $this->container['server_nonce'] = $server_nonce;

        return $this;
    }

    /**
     * Gets server_certificate
     *
     * @return string|null
     */
    public function getServerCertificate()
    {
        return $this->container['server_certificate'];
    }

    /**
     * Sets server_certificate
     *
     * @param string|null $server_certificate server_certificate
     *
     * @return self
     */
    public function setServerCertificate($server_certificate)
    {
        if (is_null($server_certificate)) {
            throw new \InvalidArgumentException('non-nullable server_certificate cannot be null');
        }
        $this->container['server_certificate'] = $server_certificate;

        return $this;
    }

    /**
     * Gets server_endpoints
     *
     * @return \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null
     */
    public function getServerEndpoints()
    {
        return $this->container['server_endpoints'];
    }

    /**
     * Sets server_endpoints
     *
     * @param \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null $server_endpoints server_endpoints
     *
     * @return self
     */
    public function setServerEndpoints($server_endpoints)
    {
        if (is_null($server_endpoints)) {
            throw new \InvalidArgumentException('non-nullable server_endpoints cannot be null');
        }
        $this->container['server_endpoints'] = $server_endpoints;

        return $this;
    }

    /**
     * Gets server_software_certificates
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]|null
     */
    public function getServerSoftwareCertificates()
    {
        return $this->container['server_software_certificates'];
    }

    /**
     * Sets server_software_certificates
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]|null $server_software_certificates server_software_certificates
     *
     * @return self
     */
    public function setServerSoftwareCertificates($server_software_certificates)
    {
        if (is_null($server_software_certificates)) {
            throw new \InvalidArgumentException('non-nullable server_software_certificates cannot be null');
        }
        $this->container['server_software_certificates'] = $server_software_certificates;

        return $this;
    }

    /**
     * Gets server_signature
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SignatureData|null
     */
    public function getServerSignature()
    {
        return $this->container['server_signature'];
    }

    /**
     * Sets server_signature
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SignatureData|null $server_signature server_signature
     *
     * @return self
     */
    public function setServerSignature($server_signature)
    {
        if (is_null($server_signature)) {
            throw new \InvalidArgumentException('non-nullable server_signature cannot be null');
        }
        $this->container['server_signature'] = $server_signature;

        return $this;
    }

    /**
     * Gets max_request_message_size
     *
     * @return int|null
     */
    public function getMaxRequestMessageSize()
    {
        return $this->container['max_request_message_size'];
    }

    /**
     * Sets max_request_message_size
     *
     * @param int|null $max_request_message_size max_request_message_size
     *
     * @return self
     */
    public function setMaxRequestMessageSize($max_request_message_size)
    {
        if (is_null($max_request_message_size)) {
            throw new \InvalidArgumentException('non-nullable max_request_message_size cannot be null');
        }

        if (($max_request_message_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_request_message_size when calling CreateSessionResponse., must be smaller than or equal to 4294967295.');
        }
        if (($max_request_message_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_request_message_size when calling CreateSessionResponse., must be bigger than or equal to 0.');
        }

        $this->container['max_request_message_size'] = $max_request_message_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


