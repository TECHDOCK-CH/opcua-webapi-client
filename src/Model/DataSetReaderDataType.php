<?php
/**
 * DataSetReaderDataType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * DataSetReaderDataType Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.9/#6.2.9.13.1).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataSetReaderDataType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataSetReaderDataType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'enabled' => 'bool',
        'publisher_id' => '\TechDock\OpcUaWebApiClient\Model\Variant',
        'writer_group_id' => 'int',
        'data_set_writer_id' => 'int',
        'data_set_meta_data' => '\TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType',
        'data_set_field_content_mask' => 'int',
        'message_receive_timeout' => 'float',
        'key_frame_count' => 'int',
        'header_layout_uri' => 'string',
        'security_mode' => 'int',
        'security_group_id' => 'string',
        'security_key_services' => '\TechDock\OpcUaWebApiClient\Model\EndpointDescription[]',
        'data_set_reader_properties' => '\TechDock\OpcUaWebApiClient\Model\KeyValuePair[]',
        'transport_settings' => 'object',
        'message_settings' => 'object',
        'subscribed_data_set' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'enabled' => null,
        'publisher_id' => null,
        'writer_group_id' => 'int32',
        'data_set_writer_id' => 'int32',
        'data_set_meta_data' => null,
        'data_set_field_content_mask' => 'int64',
        'message_receive_timeout' => 'double',
        'key_frame_count' => 'int64',
        'header_layout_uri' => null,
        'security_mode' => 'MessageSecurityMode',
        'security_group_id' => null,
        'security_key_services' => null,
        'data_set_reader_properties' => null,
        'transport_settings' => null,
        'message_settings' => null,
        'subscribed_data_set' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'enabled' => false,
        'publisher_id' => false,
        'writer_group_id' => false,
        'data_set_writer_id' => false,
        'data_set_meta_data' => false,
        'data_set_field_content_mask' => false,
        'message_receive_timeout' => false,
        'key_frame_count' => false,
        'header_layout_uri' => false,
        'security_mode' => false,
        'security_group_id' => false,
        'security_key_services' => false,
        'data_set_reader_properties' => false,
        'transport_settings' => false,
        'message_settings' => false,
        'subscribed_data_set' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'enabled' => 'Enabled',
        'publisher_id' => 'PublisherId',
        'writer_group_id' => 'WriterGroupId',
        'data_set_writer_id' => 'DataSetWriterId',
        'data_set_meta_data' => 'DataSetMetaData',
        'data_set_field_content_mask' => 'DataSetFieldContentMask',
        'message_receive_timeout' => 'MessageReceiveTimeout',
        'key_frame_count' => 'KeyFrameCount',
        'header_layout_uri' => 'HeaderLayoutUri',
        'security_mode' => 'SecurityMode',
        'security_group_id' => 'SecurityGroupId',
        'security_key_services' => 'SecurityKeyServices',
        'data_set_reader_properties' => 'DataSetReaderProperties',
        'transport_settings' => 'TransportSettings',
        'message_settings' => 'MessageSettings',
        'subscribed_data_set' => 'SubscribedDataSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'publisher_id' => 'setPublisherId',
        'writer_group_id' => 'setWriterGroupId',
        'data_set_writer_id' => 'setDataSetWriterId',
        'data_set_meta_data' => 'setDataSetMetaData',
        'data_set_field_content_mask' => 'setDataSetFieldContentMask',
        'message_receive_timeout' => 'setMessageReceiveTimeout',
        'key_frame_count' => 'setKeyFrameCount',
        'header_layout_uri' => 'setHeaderLayoutUri',
        'security_mode' => 'setSecurityMode',
        'security_group_id' => 'setSecurityGroupId',
        'security_key_services' => 'setSecurityKeyServices',
        'data_set_reader_properties' => 'setDataSetReaderProperties',
        'transport_settings' => 'setTransportSettings',
        'message_settings' => 'setMessageSettings',
        'subscribed_data_set' => 'setSubscribedDataSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'publisher_id' => 'getPublisherId',
        'writer_group_id' => 'getWriterGroupId',
        'data_set_writer_id' => 'getDataSetWriterId',
        'data_set_meta_data' => 'getDataSetMetaData',
        'data_set_field_content_mask' => 'getDataSetFieldContentMask',
        'message_receive_timeout' => 'getMessageReceiveTimeout',
        'key_frame_count' => 'getKeyFrameCount',
        'header_layout_uri' => 'getHeaderLayoutUri',
        'security_mode' => 'getSecurityMode',
        'security_group_id' => 'getSecurityGroupId',
        'security_key_services' => 'getSecurityKeyServices',
        'data_set_reader_properties' => 'getDataSetReaderProperties',
        'transport_settings' => 'getTransportSettings',
        'message_settings' => 'getMessageSettings',
        'subscribed_data_set' => 'getSubscribedDataSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], false);
        $this->setIfExists('publisher_id', $data ?? [], null);
        $this->setIfExists('writer_group_id', $data ?? [], 0);
        $this->setIfExists('data_set_writer_id', $data ?? [], 0);
        $this->setIfExists('data_set_meta_data', $data ?? [], null);
        $this->setIfExists('data_set_field_content_mask', $data ?? [], 0);
        $this->setIfExists('message_receive_timeout', $data ?? [], 0);
        $this->setIfExists('key_frame_count', $data ?? [], 0);
        $this->setIfExists('header_layout_uri', $data ?? [], null);
        $this->setIfExists('security_mode', $data ?? [], null);
        $this->setIfExists('security_group_id', $data ?? [], null);
        $this->setIfExists('security_key_services', $data ?? [], null);
        $this->setIfExists('data_set_reader_properties', $data ?? [], null);
        $this->setIfExists('transport_settings', $data ?? [], null);
        $this->setIfExists('message_settings', $data ?? [], null);
        $this->setIfExists('subscribed_data_set', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['writer_group_id']) && ($this->container['writer_group_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'writer_group_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['writer_group_id']) && ($this->container['writer_group_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'writer_group_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['data_set_writer_id']) && ($this->container['data_set_writer_id'] > 65535)) {
            $invalidProperties[] = "invalid value for 'data_set_writer_id', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['data_set_writer_id']) && ($this->container['data_set_writer_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'data_set_writer_id', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['data_set_field_content_mask']) && ($this->container['data_set_field_content_mask'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'data_set_field_content_mask', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['data_set_field_content_mask']) && ($this->container['data_set_field_content_mask'] < 0)) {
            $invalidProperties[] = "invalid value for 'data_set_field_content_mask', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['key_frame_count']) && ($this->container['key_frame_count'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'key_frame_count', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['key_frame_count']) && ($this->container['key_frame_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'key_frame_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return \TechDock\OpcUaWebApiClient\Model\Variant|null
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param \TechDock\OpcUaWebApiClient\Model\Variant|null $publisher_id publisher_id
     *
     * @return self
     */
    public function setPublisherId($publisher_id)
    {
        if (is_null($publisher_id)) {
            throw new \InvalidArgumentException('non-nullable publisher_id cannot be null');
        }
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets writer_group_id
     *
     * @return int|null
     */
    public function getWriterGroupId()
    {
        return $this->container['writer_group_id'];
    }

    /**
     * Sets writer_group_id
     *
     * @param int|null $writer_group_id writer_group_id
     *
     * @return self
     */
    public function setWriterGroupId($writer_group_id)
    {
        if (is_null($writer_group_id)) {
            throw new \InvalidArgumentException('non-nullable writer_group_id cannot be null');
        }

        if (($writer_group_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $writer_group_id when calling DataSetReaderDataType., must be smaller than or equal to 65535.');
        }
        if (($writer_group_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $writer_group_id when calling DataSetReaderDataType., must be bigger than or equal to 0.');
        }

        $this->container['writer_group_id'] = $writer_group_id;

        return $this;
    }

    /**
     * Gets data_set_writer_id
     *
     * @return int|null
     */
    public function getDataSetWriterId()
    {
        return $this->container['data_set_writer_id'];
    }

    /**
     * Sets data_set_writer_id
     *
     * @param int|null $data_set_writer_id data_set_writer_id
     *
     * @return self
     */
    public function setDataSetWriterId($data_set_writer_id)
    {
        if (is_null($data_set_writer_id)) {
            throw new \InvalidArgumentException('non-nullable data_set_writer_id cannot be null');
        }

        if (($data_set_writer_id > 65535)) {
            throw new \InvalidArgumentException('invalid value for $data_set_writer_id when calling DataSetReaderDataType., must be smaller than or equal to 65535.');
        }
        if (($data_set_writer_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $data_set_writer_id when calling DataSetReaderDataType., must be bigger than or equal to 0.');
        }

        $this->container['data_set_writer_id'] = $data_set_writer_id;

        return $this;
    }

    /**
     * Gets data_set_meta_data
     *
     * @return \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType|null
     */
    public function getDataSetMetaData()
    {
        return $this->container['data_set_meta_data'];
    }

    /**
     * Sets data_set_meta_data
     *
     * @param \TechDock\OpcUaWebApiClient\Model\DataSetMetaDataType|null $data_set_meta_data data_set_meta_data
     *
     * @return self
     */
    public function setDataSetMetaData($data_set_meta_data)
    {
        if (is_null($data_set_meta_data)) {
            throw new \InvalidArgumentException('non-nullable data_set_meta_data cannot be null');
        }
        $this->container['data_set_meta_data'] = $data_set_meta_data;

        return $this;
    }

    /**
     * Gets data_set_field_content_mask
     *
     * @return int|null
     */
    public function getDataSetFieldContentMask()
    {
        return $this->container['data_set_field_content_mask'];
    }

    /**
     * Sets data_set_field_content_mask
     *
     * @param int|null $data_set_field_content_mask data_set_field_content_mask
     *
     * @return self
     */
    public function setDataSetFieldContentMask($data_set_field_content_mask)
    {
        if (is_null($data_set_field_content_mask)) {
            throw new \InvalidArgumentException('non-nullable data_set_field_content_mask cannot be null');
        }

        if (($data_set_field_content_mask > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $data_set_field_content_mask when calling DataSetReaderDataType., must be smaller than or equal to 4294967295.');
        }
        if (($data_set_field_content_mask < 0)) {
            throw new \InvalidArgumentException('invalid value for $data_set_field_content_mask when calling DataSetReaderDataType., must be bigger than or equal to 0.');
        }

        $this->container['data_set_field_content_mask'] = $data_set_field_content_mask;

        return $this;
    }

    /**
     * Gets message_receive_timeout
     *
     * @return float|null
     */
    public function getMessageReceiveTimeout()
    {
        return $this->container['message_receive_timeout'];
    }

    /**
     * Sets message_receive_timeout
     *
     * @param float|null $message_receive_timeout message_receive_timeout
     *
     * @return self
     */
    public function setMessageReceiveTimeout($message_receive_timeout)
    {
        if (is_null($message_receive_timeout)) {
            throw new \InvalidArgumentException('non-nullable message_receive_timeout cannot be null');
        }
        $this->container['message_receive_timeout'] = $message_receive_timeout;

        return $this;
    }

    /**
     * Gets key_frame_count
     *
     * @return int|null
     */
    public function getKeyFrameCount()
    {
        return $this->container['key_frame_count'];
    }

    /**
     * Sets key_frame_count
     *
     * @param int|null $key_frame_count key_frame_count
     *
     * @return self
     */
    public function setKeyFrameCount($key_frame_count)
    {
        if (is_null($key_frame_count)) {
            throw new \InvalidArgumentException('non-nullable key_frame_count cannot be null');
        }

        if (($key_frame_count > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $key_frame_count when calling DataSetReaderDataType., must be smaller than or equal to 4294967295.');
        }
        if (($key_frame_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $key_frame_count when calling DataSetReaderDataType., must be bigger than or equal to 0.');
        }

        $this->container['key_frame_count'] = $key_frame_count;

        return $this;
    }

    /**
     * Gets header_layout_uri
     *
     * @return string|null
     */
    public function getHeaderLayoutUri()
    {
        return $this->container['header_layout_uri'];
    }

    /**
     * Sets header_layout_uri
     *
     * @param string|null $header_layout_uri header_layout_uri
     *
     * @return self
     */
    public function setHeaderLayoutUri($header_layout_uri)
    {
        if (is_null($header_layout_uri)) {
            throw new \InvalidArgumentException('non-nullable header_layout_uri cannot be null');
        }
        $this->container['header_layout_uri'] = $header_layout_uri;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return int|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param int|null $security_mode [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.3.10).
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        if (is_null($security_mode)) {
            throw new \InvalidArgumentException('non-nullable security_mode cannot be null');
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets security_group_id
     *
     * @return string|null
     */
    public function getSecurityGroupId()
    {
        return $this->container['security_group_id'];
    }

    /**
     * Sets security_group_id
     *
     * @param string|null $security_group_id security_group_id
     *
     * @return self
     */
    public function setSecurityGroupId($security_group_id)
    {
        if (is_null($security_group_id)) {
            throw new \InvalidArgumentException('non-nullable security_group_id cannot be null');
        }
        $this->container['security_group_id'] = $security_group_id;

        return $this;
    }

    /**
     * Gets security_key_services
     *
     * @return \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null
     */
    public function getSecurityKeyServices()
    {
        return $this->container['security_key_services'];
    }

    /**
     * Sets security_key_services
     *
     * @param \TechDock\OpcUaWebApiClient\Model\EndpointDescription[]|null $security_key_services security_key_services
     *
     * @return self
     */
    public function setSecurityKeyServices($security_key_services)
    {
        if (is_null($security_key_services)) {
            throw new \InvalidArgumentException('non-nullable security_key_services cannot be null');
        }
        $this->container['security_key_services'] = $security_key_services;

        return $this;
    }

    /**
     * Gets data_set_reader_properties
     *
     * @return \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null
     */
    public function getDataSetReaderProperties()
    {
        return $this->container['data_set_reader_properties'];
    }

    /**
     * Sets data_set_reader_properties
     *
     * @param \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null $data_set_reader_properties data_set_reader_properties
     *
     * @return self
     */
    public function setDataSetReaderProperties($data_set_reader_properties)
    {
        if (is_null($data_set_reader_properties)) {
            throw new \InvalidArgumentException('non-nullable data_set_reader_properties cannot be null');
        }
        $this->container['data_set_reader_properties'] = $data_set_reader_properties;

        return $this;
    }

    /**
     * Gets transport_settings
     *
     * @return object|null
     */
    public function getTransportSettings()
    {
        return $this->container['transport_settings'];
    }

    /**
     * Sets transport_settings
     *
     * @param object|null $transport_settings transport_settings
     *
     * @return self
     */
    public function setTransportSettings($transport_settings)
    {
        if (is_null($transport_settings)) {
            throw new \InvalidArgumentException('non-nullable transport_settings cannot be null');
        }
        $this->container['transport_settings'] = $transport_settings;

        return $this;
    }

    /**
     * Gets message_settings
     *
     * @return object|null
     */
    public function getMessageSettings()
    {
        return $this->container['message_settings'];
    }

    /**
     * Sets message_settings
     *
     * @param object|null $message_settings message_settings
     *
     * @return self
     */
    public function setMessageSettings($message_settings)
    {
        if (is_null($message_settings)) {
            throw new \InvalidArgumentException('non-nullable message_settings cannot be null');
        }
        $this->container['message_settings'] = $message_settings;

        return $this;
    }

    /**
     * Gets subscribed_data_set
     *
     * @return object|null
     */
    public function getSubscribedDataSet()
    {
        return $this->container['subscribed_data_set'];
    }

    /**
     * Sets subscribed_data_set
     *
     * @param object|null $subscribed_data_set subscribed_data_set
     *
     * @return self
     */
    public function setSubscribedDataSet($subscribed_data_set)
    {
        if (is_null($subscribed_data_set)) {
            throw new \InvalidArgumentException('non-nullable subscribed_data_set cannot be null');
        }
        $this->container['subscribed_data_set'] = $subscribed_data_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


