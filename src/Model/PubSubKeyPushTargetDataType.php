<?php
/**
 * PubSubKeyPushTargetDataType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * PubSubKeyPushTargetDataType Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.12/#6.2.12.3).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PubSubKeyPushTargetDataType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PubSubKeyPushTargetDataType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'application_uri' => 'string',
        'push_target_folder' => 'string[]',
        'endpoint_url' => 'string',
        'security_policy_uri' => 'string',
        'user_token_type' => '\TechDock\OpcUaWebApiClient\Model\UserTokenPolicy',
        'requested_key_count' => 'int',
        'retry_interval' => 'float',
        'push_target_properties' => '\TechDock\OpcUaWebApiClient\Model\KeyValuePair[]',
        'security_groups' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'application_uri' => null,
        'push_target_folder' => null,
        'endpoint_url' => null,
        'security_policy_uri' => null,
        'user_token_type' => null,
        'requested_key_count' => 'int32',
        'retry_interval' => 'double',
        'push_target_properties' => null,
        'security_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'application_uri' => false,
        'push_target_folder' => false,
        'endpoint_url' => false,
        'security_policy_uri' => false,
        'user_token_type' => false,
        'requested_key_count' => false,
        'retry_interval' => false,
        'push_target_properties' => false,
        'security_groups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_uri' => 'ApplicationUri',
        'push_target_folder' => 'PushTargetFolder',
        'endpoint_url' => 'EndpointUrl',
        'security_policy_uri' => 'SecurityPolicyUri',
        'user_token_type' => 'UserTokenType',
        'requested_key_count' => 'RequestedKeyCount',
        'retry_interval' => 'RetryInterval',
        'push_target_properties' => 'PushTargetProperties',
        'security_groups' => 'SecurityGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_uri' => 'setApplicationUri',
        'push_target_folder' => 'setPushTargetFolder',
        'endpoint_url' => 'setEndpointUrl',
        'security_policy_uri' => 'setSecurityPolicyUri',
        'user_token_type' => 'setUserTokenType',
        'requested_key_count' => 'setRequestedKeyCount',
        'retry_interval' => 'setRetryInterval',
        'push_target_properties' => 'setPushTargetProperties',
        'security_groups' => 'setSecurityGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_uri' => 'getApplicationUri',
        'push_target_folder' => 'getPushTargetFolder',
        'endpoint_url' => 'getEndpointUrl',
        'security_policy_uri' => 'getSecurityPolicyUri',
        'user_token_type' => 'getUserTokenType',
        'requested_key_count' => 'getRequestedKeyCount',
        'retry_interval' => 'getRetryInterval',
        'push_target_properties' => 'getPushTargetProperties',
        'security_groups' => 'getSecurityGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('application_uri', $data ?? [], null);
        $this->setIfExists('push_target_folder', $data ?? [], null);
        $this->setIfExists('endpoint_url', $data ?? [], null);
        $this->setIfExists('security_policy_uri', $data ?? [], null);
        $this->setIfExists('user_token_type', $data ?? [], null);
        $this->setIfExists('requested_key_count', $data ?? [], 0);
        $this->setIfExists('retry_interval', $data ?? [], 0);
        $this->setIfExists('push_target_properties', $data ?? [], null);
        $this->setIfExists('security_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['requested_key_count']) && ($this->container['requested_key_count'] > 65535)) {
            $invalidProperties[] = "invalid value for 'requested_key_count', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['requested_key_count']) && ($this->container['requested_key_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'requested_key_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_uri
     *
     * @return string|null
     */
    public function getApplicationUri()
    {
        return $this->container['application_uri'];
    }

    /**
     * Sets application_uri
     *
     * @param string|null $application_uri application_uri
     *
     * @return self
     */
    public function setApplicationUri($application_uri)
    {
        if (is_null($application_uri)) {
            throw new \InvalidArgumentException('non-nullable application_uri cannot be null');
        }
        $this->container['application_uri'] = $application_uri;

        return $this;
    }

    /**
     * Gets push_target_folder
     *
     * @return string[]|null
     */
    public function getPushTargetFolder()
    {
        return $this->container['push_target_folder'];
    }

    /**
     * Sets push_target_folder
     *
     * @param string[]|null $push_target_folder push_target_folder
     *
     * @return self
     */
    public function setPushTargetFolder($push_target_folder)
    {
        if (is_null($push_target_folder)) {
            throw new \InvalidArgumentException('non-nullable push_target_folder cannot be null');
        }
        $this->container['push_target_folder'] = $push_target_folder;

        return $this;
    }

    /**
     * Gets endpoint_url
     *
     * @return string|null
     */
    public function getEndpointUrl()
    {
        return $this->container['endpoint_url'];
    }

    /**
     * Sets endpoint_url
     *
     * @param string|null $endpoint_url endpoint_url
     *
     * @return self
     */
    public function setEndpointUrl($endpoint_url)
    {
        if (is_null($endpoint_url)) {
            throw new \InvalidArgumentException('non-nullable endpoint_url cannot be null');
        }
        $this->container['endpoint_url'] = $endpoint_url;

        return $this;
    }

    /**
     * Gets security_policy_uri
     *
     * @return string|null
     */
    public function getSecurityPolicyUri()
    {
        return $this->container['security_policy_uri'];
    }

    /**
     * Sets security_policy_uri
     *
     * @param string|null $security_policy_uri security_policy_uri
     *
     * @return self
     */
    public function setSecurityPolicyUri($security_policy_uri)
    {
        if (is_null($security_policy_uri)) {
            throw new \InvalidArgumentException('non-nullable security_policy_uri cannot be null');
        }
        $this->container['security_policy_uri'] = $security_policy_uri;

        return $this;
    }

    /**
     * Gets user_token_type
     *
     * @return \TechDock\OpcUaWebApiClient\Model\UserTokenPolicy|null
     */
    public function getUserTokenType()
    {
        return $this->container['user_token_type'];
    }

    /**
     * Sets user_token_type
     *
     * @param \TechDock\OpcUaWebApiClient\Model\UserTokenPolicy|null $user_token_type user_token_type
     *
     * @return self
     */
    public function setUserTokenType($user_token_type)
    {
        if (is_null($user_token_type)) {
            throw new \InvalidArgumentException('non-nullable user_token_type cannot be null');
        }
        $this->container['user_token_type'] = $user_token_type;

        return $this;
    }

    /**
     * Gets requested_key_count
     *
     * @return int|null
     */
    public function getRequestedKeyCount()
    {
        return $this->container['requested_key_count'];
    }

    /**
     * Sets requested_key_count
     *
     * @param int|null $requested_key_count requested_key_count
     *
     * @return self
     */
    public function setRequestedKeyCount($requested_key_count)
    {
        if (is_null($requested_key_count)) {
            throw new \InvalidArgumentException('non-nullable requested_key_count cannot be null');
        }

        if (($requested_key_count > 65535)) {
            throw new \InvalidArgumentException('invalid value for $requested_key_count when calling PubSubKeyPushTargetDataType., must be smaller than or equal to 65535.');
        }
        if (($requested_key_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $requested_key_count when calling PubSubKeyPushTargetDataType., must be bigger than or equal to 0.');
        }

        $this->container['requested_key_count'] = $requested_key_count;

        return $this;
    }

    /**
     * Gets retry_interval
     *
     * @return float|null
     */
    public function getRetryInterval()
    {
        return $this->container['retry_interval'];
    }

    /**
     * Sets retry_interval
     *
     * @param float|null $retry_interval retry_interval
     *
     * @return self
     */
    public function setRetryInterval($retry_interval)
    {
        if (is_null($retry_interval)) {
            throw new \InvalidArgumentException('non-nullable retry_interval cannot be null');
        }
        $this->container['retry_interval'] = $retry_interval;

        return $this;
    }

    /**
     * Gets push_target_properties
     *
     * @return \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null
     */
    public function getPushTargetProperties()
    {
        return $this->container['push_target_properties'];
    }

    /**
     * Sets push_target_properties
     *
     * @param \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null $push_target_properties push_target_properties
     *
     * @return self
     */
    public function setPushTargetProperties($push_target_properties)
    {
        if (is_null($push_target_properties)) {
            throw new \InvalidArgumentException('non-nullable push_target_properties cannot be null');
        }
        $this->container['push_target_properties'] = $push_target_properties;

        return $this;
    }

    /**
     * Gets security_groups
     *
     * @return string[]|null
     */
    public function getSecurityGroups()
    {
        return $this->container['security_groups'];
    }

    /**
     * Sets security_groups
     *
     * @param string[]|null $security_groups security_groups
     *
     * @return self
     */
    public function setSecurityGroups($security_groups)
    {
        if (is_null($security_groups)) {
            throw new \InvalidArgumentException('non-nullable security_groups cannot be null');
        }
        $this->container['security_groups'] = $security_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


