<?php
/**
 * RequestHeader
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * RequestHeader Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.33).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RequestHeader implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RequestHeader';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authentication_token' => 'string',
        'timestamp' => '\DateTime',
        'request_handle' => 'int',
        'return_diagnostics' => 'int',
        'audit_entry_id' => 'string',
        'timeout_hint' => 'int',
        'additional_header' => '\TechDock\OpcUaWebApiClient\Model\ExtensionObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authentication_token' => 'UaNodeId',
        'timestamp' => 'date-time',
        'request_handle' => 'int64',
        'return_diagnostics' => 'int64',
        'audit_entry_id' => null,
        'timeout_hint' => 'int64',
        'additional_header' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authentication_token' => false,
        'timestamp' => false,
        'request_handle' => false,
        'return_diagnostics' => false,
        'audit_entry_id' => false,
        'timeout_hint' => false,
        'additional_header' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_token' => 'AuthenticationToken',
        'timestamp' => 'Timestamp',
        'request_handle' => 'RequestHandle',
        'return_diagnostics' => 'ReturnDiagnostics',
        'audit_entry_id' => 'AuditEntryId',
        'timeout_hint' => 'TimeoutHint',
        'additional_header' => 'AdditionalHeader'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_token' => 'setAuthenticationToken',
        'timestamp' => 'setTimestamp',
        'request_handle' => 'setRequestHandle',
        'return_diagnostics' => 'setReturnDiagnostics',
        'audit_entry_id' => 'setAuditEntryId',
        'timeout_hint' => 'setTimeoutHint',
        'additional_header' => 'setAdditionalHeader'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_token' => 'getAuthenticationToken',
        'timestamp' => 'getTimestamp',
        'request_handle' => 'getRequestHandle',
        'return_diagnostics' => 'getReturnDiagnostics',
        'audit_entry_id' => 'getAuditEntryId',
        'timeout_hint' => 'getTimeoutHint',
        'additional_header' => 'getAdditionalHeader'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('authentication_token', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('request_handle', $data ?? [], 0);
        $this->setIfExists('return_diagnostics', $data ?? [], 0);
        $this->setIfExists('audit_entry_id', $data ?? [], null);
        $this->setIfExists('timeout_hint', $data ?? [], 0);
        $this->setIfExists('additional_header', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['request_handle']) && ($this->container['request_handle'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'request_handle', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['request_handle']) && ($this->container['request_handle'] < 0)) {
            $invalidProperties[] = "invalid value for 'request_handle', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['return_diagnostics']) && ($this->container['return_diagnostics'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'return_diagnostics', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['return_diagnostics']) && ($this->container['return_diagnostics'] < 0)) {
            $invalidProperties[] = "invalid value for 'return_diagnostics', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['timeout_hint']) && ($this->container['timeout_hint'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'timeout_hint', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['timeout_hint']) && ($this->container['timeout_hint'] < 0)) {
            $invalidProperties[] = "invalid value for 'timeout_hint', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_token
     *
     * @return string|null
     */
    public function getAuthenticationToken()
    {
        return $this->container['authentication_token'];
    }

    /**
     * Sets authentication_token
     *
     * @param string|null $authentication_token authentication_token
     *
     * @return self
     */
    public function setAuthenticationToken($authentication_token)
    {
        if (is_null($authentication_token)) {
            throw new \InvalidArgumentException('non-nullable authentication_token cannot be null');
        }
        $this->container['authentication_token'] = $authentication_token;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets request_handle
     *
     * @return int|null
     */
    public function getRequestHandle()
    {
        return $this->container['request_handle'];
    }

    /**
     * Sets request_handle
     *
     * @param int|null $request_handle request_handle
     *
     * @return self
     */
    public function setRequestHandle($request_handle)
    {
        if (is_null($request_handle)) {
            throw new \InvalidArgumentException('non-nullable request_handle cannot be null');
        }

        if (($request_handle > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $request_handle when calling RequestHeader., must be smaller than or equal to 4294967295.');
        }
        if (($request_handle < 0)) {
            throw new \InvalidArgumentException('invalid value for $request_handle when calling RequestHeader., must be bigger than or equal to 0.');
        }

        $this->container['request_handle'] = $request_handle;

        return $this;
    }

    /**
     * Gets return_diagnostics
     *
     * @return int|null
     */
    public function getReturnDiagnostics()
    {
        return $this->container['return_diagnostics'];
    }

    /**
     * Sets return_diagnostics
     *
     * @param int|null $return_diagnostics return_diagnostics
     *
     * @return self
     */
    public function setReturnDiagnostics($return_diagnostics)
    {
        if (is_null($return_diagnostics)) {
            throw new \InvalidArgumentException('non-nullable return_diagnostics cannot be null');
        }

        if (($return_diagnostics > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $return_diagnostics when calling RequestHeader., must be smaller than or equal to 4294967295.');
        }
        if (($return_diagnostics < 0)) {
            throw new \InvalidArgumentException('invalid value for $return_diagnostics when calling RequestHeader., must be bigger than or equal to 0.');
        }

        $this->container['return_diagnostics'] = $return_diagnostics;

        return $this;
    }

    /**
     * Gets audit_entry_id
     *
     * @return string|null
     */
    public function getAuditEntryId()
    {
        return $this->container['audit_entry_id'];
    }

    /**
     * Sets audit_entry_id
     *
     * @param string|null $audit_entry_id audit_entry_id
     *
     * @return self
     */
    public function setAuditEntryId($audit_entry_id)
    {
        if (is_null($audit_entry_id)) {
            throw new \InvalidArgumentException('non-nullable audit_entry_id cannot be null');
        }
        $this->container['audit_entry_id'] = $audit_entry_id;

        return $this;
    }

    /**
     * Gets timeout_hint
     *
     * @return int|null
     */
    public function getTimeoutHint()
    {
        return $this->container['timeout_hint'];
    }

    /**
     * Sets timeout_hint
     *
     * @param int|null $timeout_hint timeout_hint
     *
     * @return self
     */
    public function setTimeoutHint($timeout_hint)
    {
        if (is_null($timeout_hint)) {
            throw new \InvalidArgumentException('non-nullable timeout_hint cannot be null');
        }

        if (($timeout_hint > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $timeout_hint when calling RequestHeader., must be smaller than or equal to 4294967295.');
        }
        if (($timeout_hint < 0)) {
            throw new \InvalidArgumentException('invalid value for $timeout_hint when calling RequestHeader., must be bigger than or equal to 0.');
        }

        $this->container['timeout_hint'] = $timeout_hint;

        return $this;
    }

    /**
     * Gets additional_header
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null
     */
    public function getAdditionalHeader()
    {
        return $this->container['additional_header'];
    }

    /**
     * Sets additional_header
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null $additional_header additional_header
     *
     * @return self
     */
    public function setAdditionalHeader($additional_header)
    {
        if (is_null($additional_header)) {
            throw new \InvalidArgumentException('non-nullable additional_header cannot be null');
        }
        $this->container['additional_header'] = $additional_header;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


