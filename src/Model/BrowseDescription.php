<?php
/**
 * BrowseDescription
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * BrowseDescription Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BrowseDescription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BrowseDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'node_id' => 'string',
        'browse_direction' => 'int',
        'reference_type_id' => 'string',
        'include_subtypes' => 'bool',
        'node_class_mask' => 'int',
        'result_mask' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'node_id' => 'UaNodeId',
        'browse_direction' => 'BrowseDirection',
        'reference_type_id' => 'UaNodeId',
        'include_subtypes' => null,
        'node_class_mask' => 'int64',
        'result_mask' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'node_id' => false,
        'browse_direction' => false,
        'reference_type_id' => false,
        'include_subtypes' => false,
        'node_class_mask' => false,
        'result_mask' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_id' => 'NodeId',
        'browse_direction' => 'BrowseDirection',
        'reference_type_id' => 'ReferenceTypeId',
        'include_subtypes' => 'IncludeSubtypes',
        'node_class_mask' => 'NodeClassMask',
        'result_mask' => 'ResultMask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_id' => 'setNodeId',
        'browse_direction' => 'setBrowseDirection',
        'reference_type_id' => 'setReferenceTypeId',
        'include_subtypes' => 'setIncludeSubtypes',
        'node_class_mask' => 'setNodeClassMask',
        'result_mask' => 'setResultMask'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_id' => 'getNodeId',
        'browse_direction' => 'getBrowseDirection',
        'reference_type_id' => 'getReferenceTypeId',
        'include_subtypes' => 'getIncludeSubtypes',
        'node_class_mask' => 'getNodeClassMask',
        'result_mask' => 'getResultMask'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('browse_direction', $data ?? [], null);
        $this->setIfExists('reference_type_id', $data ?? [], null);
        $this->setIfExists('include_subtypes', $data ?? [], false);
        $this->setIfExists('node_class_mask', $data ?? [], 0);
        $this->setIfExists('result_mask', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['node_class_mask']) && ($this->container['node_class_mask'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'node_class_mask', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['node_class_mask']) && ($this->container['node_class_mask'] < 0)) {
            $invalidProperties[] = "invalid value for 'node_class_mask', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['result_mask']) && ($this->container['result_mask'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'result_mask', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['result_mask']) && ($this->container['result_mask'] < 0)) {
            $invalidProperties[] = "invalid value for 'result_mask', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_id
     *
     * @return string|null
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string|null $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets browse_direction
     *
     * @return int|null
     */
    public function getBrowseDirection()
    {
        return $this->container['browse_direction'];
    }

    /**
     * Sets browse_direction
     *
     * @param int|null $browse_direction [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.5).
     *
     * @return self
     */
    public function setBrowseDirection($browse_direction)
    {
        if (is_null($browse_direction)) {
            throw new \InvalidArgumentException('non-nullable browse_direction cannot be null');
        }
        $this->container['browse_direction'] = $browse_direction;

        return $this;
    }

    /**
     * Gets reference_type_id
     *
     * @return string|null
     */
    public function getReferenceTypeId()
    {
        return $this->container['reference_type_id'];
    }

    /**
     * Sets reference_type_id
     *
     * @param string|null $reference_type_id reference_type_id
     *
     * @return self
     */
    public function setReferenceTypeId($reference_type_id)
    {
        if (is_null($reference_type_id)) {
            throw new \InvalidArgumentException('non-nullable reference_type_id cannot be null');
        }
        $this->container['reference_type_id'] = $reference_type_id;

        return $this;
    }

    /**
     * Gets include_subtypes
     *
     * @return bool|null
     */
    public function getIncludeSubtypes()
    {
        return $this->container['include_subtypes'];
    }

    /**
     * Sets include_subtypes
     *
     * @param bool|null $include_subtypes include_subtypes
     *
     * @return self
     */
    public function setIncludeSubtypes($include_subtypes)
    {
        if (is_null($include_subtypes)) {
            throw new \InvalidArgumentException('non-nullable include_subtypes cannot be null');
        }
        $this->container['include_subtypes'] = $include_subtypes;

        return $this;
    }

    /**
     * Gets node_class_mask
     *
     * @return int|null
     */
    public function getNodeClassMask()
    {
        return $this->container['node_class_mask'];
    }

    /**
     * Sets node_class_mask
     *
     * @param int|null $node_class_mask node_class_mask
     *
     * @return self
     */
    public function setNodeClassMask($node_class_mask)
    {
        if (is_null($node_class_mask)) {
            throw new \InvalidArgumentException('non-nullable node_class_mask cannot be null');
        }

        if (($node_class_mask > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $node_class_mask when calling BrowseDescription., must be smaller than or equal to 4294967295.');
        }
        if (($node_class_mask < 0)) {
            throw new \InvalidArgumentException('invalid value for $node_class_mask when calling BrowseDescription., must be bigger than or equal to 0.');
        }

        $this->container['node_class_mask'] = $node_class_mask;

        return $this;
    }

    /**
     * Gets result_mask
     *
     * @return int|null
     */
    public function getResultMask()
    {
        return $this->container['result_mask'];
    }

    /**
     * Sets result_mask
     *
     * @param int|null $result_mask result_mask
     *
     * @return self
     */
    public function setResultMask($result_mask)
    {
        if (is_null($result_mask)) {
            throw new \InvalidArgumentException('non-nullable result_mask cannot be null');
        }

        if (($result_mask > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $result_mask when calling BrowseDescription., must be smaller than or equal to 4294967295.');
        }
        if (($result_mask < 0)) {
            throw new \InvalidArgumentException('invalid value for $result_mask when calling BrowseDescription., must be bigger than or equal to 0.');
        }

        $this->container['result_mask'] = $result_mask;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


