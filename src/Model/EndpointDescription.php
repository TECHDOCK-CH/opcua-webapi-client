<?php
/**
 * EndpointDescription
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * EndpointDescription Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.14).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EndpointDescription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EndpointDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'endpoint_url' => 'string',
        'server' => '\TechDock\OpcUaWebApiClient\Model\ApplicationDescription',
        'server_certificate' => 'string',
        'security_mode' => 'int',
        'security_policy_uri' => 'string',
        'user_identity_tokens' => '\TechDock\OpcUaWebApiClient\Model\UserTokenPolicy[]',
        'transport_profile_uri' => 'string',
        'security_level' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'endpoint_url' => null,
        'server' => null,
        'server_certificate' => 'byte',
        'security_mode' => 'MessageSecurityMode',
        'security_policy_uri' => null,
        'user_identity_tokens' => null,
        'transport_profile_uri' => null,
        'security_level' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'endpoint_url' => false,
        'server' => false,
        'server_certificate' => false,
        'security_mode' => false,
        'security_policy_uri' => false,
        'user_identity_tokens' => false,
        'transport_profile_uri' => false,
        'security_level' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint_url' => 'EndpointUrl',
        'server' => 'Server',
        'server_certificate' => 'ServerCertificate',
        'security_mode' => 'SecurityMode',
        'security_policy_uri' => 'SecurityPolicyUri',
        'user_identity_tokens' => 'UserIdentityTokens',
        'transport_profile_uri' => 'TransportProfileUri',
        'security_level' => 'SecurityLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint_url' => 'setEndpointUrl',
        'server' => 'setServer',
        'server_certificate' => 'setServerCertificate',
        'security_mode' => 'setSecurityMode',
        'security_policy_uri' => 'setSecurityPolicyUri',
        'user_identity_tokens' => 'setUserIdentityTokens',
        'transport_profile_uri' => 'setTransportProfileUri',
        'security_level' => 'setSecurityLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint_url' => 'getEndpointUrl',
        'server' => 'getServer',
        'server_certificate' => 'getServerCertificate',
        'security_mode' => 'getSecurityMode',
        'security_policy_uri' => 'getSecurityPolicyUri',
        'user_identity_tokens' => 'getUserIdentityTokens',
        'transport_profile_uri' => 'getTransportProfileUri',
        'security_level' => 'getSecurityLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('endpoint_url', $data ?? [], null);
        $this->setIfExists('server', $data ?? [], null);
        $this->setIfExists('server_certificate', $data ?? [], null);
        $this->setIfExists('security_mode', $data ?? [], null);
        $this->setIfExists('security_policy_uri', $data ?? [], null);
        $this->setIfExists('user_identity_tokens', $data ?? [], null);
        $this->setIfExists('transport_profile_uri', $data ?? [], null);
        $this->setIfExists('security_level', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['security_level']) && ($this->container['security_level'] > 255)) {
            $invalidProperties[] = "invalid value for 'security_level', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['security_level']) && ($this->container['security_level'] < 0)) {
            $invalidProperties[] = "invalid value for 'security_level', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint_url
     *
     * @return string|null
     */
    public function getEndpointUrl()
    {
        return $this->container['endpoint_url'];
    }

    /**
     * Sets endpoint_url
     *
     * @param string|null $endpoint_url endpoint_url
     *
     * @return self
     */
    public function setEndpointUrl($endpoint_url)
    {
        if (is_null($endpoint_url)) {
            throw new \InvalidArgumentException('non-nullable endpoint_url cannot be null');
        }
        $this->container['endpoint_url'] = $endpoint_url;

        return $this;
    }

    /**
     * Gets server
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ApplicationDescription|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ApplicationDescription|null $server server
     *
     * @return self
     */
    public function setServer($server)
    {
        if (is_null($server)) {
            throw new \InvalidArgumentException('non-nullable server cannot be null');
        }
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets server_certificate
     *
     * @return string|null
     */
    public function getServerCertificate()
    {
        return $this->container['server_certificate'];
    }

    /**
     * Sets server_certificate
     *
     * @param string|null $server_certificate server_certificate
     *
     * @return self
     */
    public function setServerCertificate($server_certificate)
    {
        if (is_null($server_certificate)) {
            throw new \InvalidArgumentException('non-nullable server_certificate cannot be null');
        }
        $this->container['server_certificate'] = $server_certificate;

        return $this;
    }

    /**
     * Gets security_mode
     *
     * @return int|null
     */
    public function getSecurityMode()
    {
        return $this->container['security_mode'];
    }

    /**
     * Sets security_mode
     *
     * @param int|null $security_mode [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part5/12.3.10).
     *
     * @return self
     */
    public function setSecurityMode($security_mode)
    {
        if (is_null($security_mode)) {
            throw new \InvalidArgumentException('non-nullable security_mode cannot be null');
        }
        $this->container['security_mode'] = $security_mode;

        return $this;
    }

    /**
     * Gets security_policy_uri
     *
     * @return string|null
     */
    public function getSecurityPolicyUri()
    {
        return $this->container['security_policy_uri'];
    }

    /**
     * Sets security_policy_uri
     *
     * @param string|null $security_policy_uri security_policy_uri
     *
     * @return self
     */
    public function setSecurityPolicyUri($security_policy_uri)
    {
        if (is_null($security_policy_uri)) {
            throw new \InvalidArgumentException('non-nullable security_policy_uri cannot be null');
        }
        $this->container['security_policy_uri'] = $security_policy_uri;

        return $this;
    }

    /**
     * Gets user_identity_tokens
     *
     * @return \TechDock\OpcUaWebApiClient\Model\UserTokenPolicy[]|null
     */
    public function getUserIdentityTokens()
    {
        return $this->container['user_identity_tokens'];
    }

    /**
     * Sets user_identity_tokens
     *
     * @param \TechDock\OpcUaWebApiClient\Model\UserTokenPolicy[]|null $user_identity_tokens user_identity_tokens
     *
     * @return self
     */
    public function setUserIdentityTokens($user_identity_tokens)
    {
        if (is_null($user_identity_tokens)) {
            throw new \InvalidArgumentException('non-nullable user_identity_tokens cannot be null');
        }
        $this->container['user_identity_tokens'] = $user_identity_tokens;

        return $this;
    }

    /**
     * Gets transport_profile_uri
     *
     * @return string|null
     */
    public function getTransportProfileUri()
    {
        return $this->container['transport_profile_uri'];
    }

    /**
     * Sets transport_profile_uri
     *
     * @param string|null $transport_profile_uri transport_profile_uri
     *
     * @return self
     */
    public function setTransportProfileUri($transport_profile_uri)
    {
        if (is_null($transport_profile_uri)) {
            throw new \InvalidArgumentException('non-nullable transport_profile_uri cannot be null');
        }
        $this->container['transport_profile_uri'] = $transport_profile_uri;

        return $this;
    }

    /**
     * Gets security_level
     *
     * @return int|null
     */
    public function getSecurityLevel()
    {
        return $this->container['security_level'];
    }

    /**
     * Sets security_level
     *
     * @param int|null $security_level security_level
     *
     * @return self
     */
    public function setSecurityLevel($security_level)
    {
        if (is_null($security_level)) {
            throw new \InvalidArgumentException('non-nullable security_level cannot be null');
        }

        if (($security_level > 255)) {
            throw new \InvalidArgumentException('invalid value for $security_level when calling EndpointDescription., must be smaller than or equal to 255.');
        }
        if (($security_level < 0)) {
            throw new \InvalidArgumentException('invalid value for $security_level when calling EndpointDescription., must be bigger than or equal to 0.');
        }

        $this->container['security_level'] = $security_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


