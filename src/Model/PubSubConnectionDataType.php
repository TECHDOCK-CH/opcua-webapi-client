<?php
/**
 * PubSubConnectionDataType
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * PubSubConnectionDataType Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.7/#6.2.7.5.1).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PubSubConnectionDataType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PubSubConnectionDataType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'enabled' => 'bool',
        'publisher_id' => '\TechDock\OpcUaWebApiClient\Model\Variant',
        'transport_profile_uri' => 'string',
        'address' => 'object',
        'connection_properties' => '\TechDock\OpcUaWebApiClient\Model\KeyValuePair[]',
        'transport_settings' => 'object',
        'writer_groups' => '\TechDock\OpcUaWebApiClient\Model\WriterGroupDataType[]',
        'reader_groups' => '\TechDock\OpcUaWebApiClient\Model\ReaderGroupDataType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'enabled' => null,
        'publisher_id' => null,
        'transport_profile_uri' => null,
        'address' => null,
        'connection_properties' => null,
        'transport_settings' => null,
        'writer_groups' => null,
        'reader_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'enabled' => false,
        'publisher_id' => false,
        'transport_profile_uri' => false,
        'address' => false,
        'connection_properties' => false,
        'transport_settings' => false,
        'writer_groups' => false,
        'reader_groups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'enabled' => 'Enabled',
        'publisher_id' => 'PublisherId',
        'transport_profile_uri' => 'TransportProfileUri',
        'address' => 'Address',
        'connection_properties' => 'ConnectionProperties',
        'transport_settings' => 'TransportSettings',
        'writer_groups' => 'WriterGroups',
        'reader_groups' => 'ReaderGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'publisher_id' => 'setPublisherId',
        'transport_profile_uri' => 'setTransportProfileUri',
        'address' => 'setAddress',
        'connection_properties' => 'setConnectionProperties',
        'transport_settings' => 'setTransportSettings',
        'writer_groups' => 'setWriterGroups',
        'reader_groups' => 'setReaderGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'publisher_id' => 'getPublisherId',
        'transport_profile_uri' => 'getTransportProfileUri',
        'address' => 'getAddress',
        'connection_properties' => 'getConnectionProperties',
        'transport_settings' => 'getTransportSettings',
        'writer_groups' => 'getWriterGroups',
        'reader_groups' => 'getReaderGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], false);
        $this->setIfExists('publisher_id', $data ?? [], null);
        $this->setIfExists('transport_profile_uri', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('connection_properties', $data ?? [], null);
        $this->setIfExists('transport_settings', $data ?? [], null);
        $this->setIfExists('writer_groups', $data ?? [], null);
        $this->setIfExists('reader_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return \TechDock\OpcUaWebApiClient\Model\Variant|null
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param \TechDock\OpcUaWebApiClient\Model\Variant|null $publisher_id publisher_id
     *
     * @return self
     */
    public function setPublisherId($publisher_id)
    {
        if (is_null($publisher_id)) {
            throw new \InvalidArgumentException('non-nullable publisher_id cannot be null');
        }
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets transport_profile_uri
     *
     * @return string|null
     */
    public function getTransportProfileUri()
    {
        return $this->container['transport_profile_uri'];
    }

    /**
     * Sets transport_profile_uri
     *
     * @param string|null $transport_profile_uri transport_profile_uri
     *
     * @return self
     */
    public function setTransportProfileUri($transport_profile_uri)
    {
        if (is_null($transport_profile_uri)) {
            throw new \InvalidArgumentException('non-nullable transport_profile_uri cannot be null');
        }
        $this->container['transport_profile_uri'] = $transport_profile_uri;

        return $this;
    }

    /**
     * Gets address
     *
     * @return object|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param object|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets connection_properties
     *
     * @return \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null
     */
    public function getConnectionProperties()
    {
        return $this->container['connection_properties'];
    }

    /**
     * Sets connection_properties
     *
     * @param \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null $connection_properties connection_properties
     *
     * @return self
     */
    public function setConnectionProperties($connection_properties)
    {
        if (is_null($connection_properties)) {
            throw new \InvalidArgumentException('non-nullable connection_properties cannot be null');
        }
        $this->container['connection_properties'] = $connection_properties;

        return $this;
    }

    /**
     * Gets transport_settings
     *
     * @return object|null
     */
    public function getTransportSettings()
    {
        return $this->container['transport_settings'];
    }

    /**
     * Sets transport_settings
     *
     * @param object|null $transport_settings transport_settings
     *
     * @return self
     */
    public function setTransportSettings($transport_settings)
    {
        if (is_null($transport_settings)) {
            throw new \InvalidArgumentException('non-nullable transport_settings cannot be null');
        }
        $this->container['transport_settings'] = $transport_settings;

        return $this;
    }

    /**
     * Gets writer_groups
     *
     * @return \TechDock\OpcUaWebApiClient\Model\WriterGroupDataType[]|null
     */
    public function getWriterGroups()
    {
        return $this->container['writer_groups'];
    }

    /**
     * Sets writer_groups
     *
     * @param \TechDock\OpcUaWebApiClient\Model\WriterGroupDataType[]|null $writer_groups writer_groups
     *
     * @return self
     */
    public function setWriterGroups($writer_groups)
    {
        if (is_null($writer_groups)) {
            throw new \InvalidArgumentException('non-nullable writer_groups cannot be null');
        }
        $this->container['writer_groups'] = $writer_groups;

        return $this;
    }

    /**
     * Gets reader_groups
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ReaderGroupDataType[]|null
     */
    public function getReaderGroups()
    {
        return $this->container['reader_groups'];
    }

    /**
     * Sets reader_groups
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ReaderGroupDataType[]|null $reader_groups reader_groups
     *
     * @return self
     */
    public function setReaderGroups($reader_groups)
    {
        if (is_null($reader_groups)) {
            throw new \InvalidArgumentException('non-nullable reader_groups cannot be null');
        }
        $this->container['reader_groups'] = $reader_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


