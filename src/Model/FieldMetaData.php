<?php
/**
 * FieldMetaData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * FieldMetaData Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part14/6.2.3/#6.2.3.2.4).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FieldMetaData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FieldMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => '\TechDock\OpcUaWebApiClient\Model\LocalizedText',
        'field_flags' => 'int',
        'built_in_type' => 'int',
        'data_type' => 'string',
        'value_rank' => 'int',
        'array_dimensions' => 'int[]',
        'max_string_length' => 'int',
        'data_set_field_id' => 'string',
        'properties' => '\TechDock\OpcUaWebApiClient\Model\KeyValuePair[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'field_flags' => 'int32',
        'built_in_type' => 'int32',
        'data_type' => 'UaNodeId',
        'value_rank' => 'int32',
        'array_dimensions' => 'int64',
        'max_string_length' => 'int64',
        'data_set_field_id' => 'uuid',
        'properties' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'field_flags' => false,
        'built_in_type' => false,
        'data_type' => false,
        'value_rank' => false,
        'array_dimensions' => false,
        'max_string_length' => false,
        'data_set_field_id' => false,
        'properties' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'description' => 'Description',
        'field_flags' => 'FieldFlags',
        'built_in_type' => 'BuiltInType',
        'data_type' => 'DataType',
        'value_rank' => 'ValueRank',
        'array_dimensions' => 'ArrayDimensions',
        'max_string_length' => 'MaxStringLength',
        'data_set_field_id' => 'DataSetFieldId',
        'properties' => 'Properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'field_flags' => 'setFieldFlags',
        'built_in_type' => 'setBuiltInType',
        'data_type' => 'setDataType',
        'value_rank' => 'setValueRank',
        'array_dimensions' => 'setArrayDimensions',
        'max_string_length' => 'setMaxStringLength',
        'data_set_field_id' => 'setDataSetFieldId',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'field_flags' => 'getFieldFlags',
        'built_in_type' => 'getBuiltInType',
        'data_type' => 'getDataType',
        'value_rank' => 'getValueRank',
        'array_dimensions' => 'getArrayDimensions',
        'max_string_length' => 'getMaxStringLength',
        'data_set_field_id' => 'getDataSetFieldId',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('field_flags', $data ?? [], 0);
        $this->setIfExists('built_in_type', $data ?? [], 0);
        $this->setIfExists('data_type', $data ?? [], null);
        $this->setIfExists('value_rank', $data ?? [], 0);
        $this->setIfExists('array_dimensions', $data ?? [], null);
        $this->setIfExists('max_string_length', $data ?? [], 0);
        $this->setIfExists('data_set_field_id', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['field_flags']) && ($this->container['field_flags'] > 65535)) {
            $invalidProperties[] = "invalid value for 'field_flags', must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['field_flags']) && ($this->container['field_flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'field_flags', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['built_in_type']) && ($this->container['built_in_type'] > 255)) {
            $invalidProperties[] = "invalid value for 'built_in_type', must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['built_in_type']) && ($this->container['built_in_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'built_in_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_string_length']) && ($this->container['max_string_length'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'max_string_length', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['max_string_length']) && ($this->container['max_string_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_string_length', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \TechDock\OpcUaWebApiClient\Model\LocalizedText|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \TechDock\OpcUaWebApiClient\Model\LocalizedText|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets field_flags
     *
     * @return int|null
     */
    public function getFieldFlags()
    {
        return $this->container['field_flags'];
    }

    /**
     * Sets field_flags
     *
     * @param int|null $field_flags field_flags
     *
     * @return self
     */
    public function setFieldFlags($field_flags)
    {
        if (is_null($field_flags)) {
            throw new \InvalidArgumentException('non-nullable field_flags cannot be null');
        }

        if (($field_flags > 65535)) {
            throw new \InvalidArgumentException('invalid value for $field_flags when calling FieldMetaData., must be smaller than or equal to 65535.');
        }
        if (($field_flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $field_flags when calling FieldMetaData., must be bigger than or equal to 0.');
        }

        $this->container['field_flags'] = $field_flags;

        return $this;
    }

    /**
     * Gets built_in_type
     *
     * @return int|null
     */
    public function getBuiltInType()
    {
        return $this->container['built_in_type'];
    }

    /**
     * Sets built_in_type
     *
     * @param int|null $built_in_type built_in_type
     *
     * @return self
     */
    public function setBuiltInType($built_in_type)
    {
        if (is_null($built_in_type)) {
            throw new \InvalidArgumentException('non-nullable built_in_type cannot be null');
        }

        if (($built_in_type > 255)) {
            throw new \InvalidArgumentException('invalid value for $built_in_type when calling FieldMetaData., must be smaller than or equal to 255.');
        }
        if (($built_in_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $built_in_type when calling FieldMetaData., must be bigger than or equal to 0.');
        }

        $this->container['built_in_type'] = $built_in_type;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string|null
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string|null $data_type data_type
     *
     * @return self
     */
    public function setDataType($data_type)
    {
        if (is_null($data_type)) {
            throw new \InvalidArgumentException('non-nullable data_type cannot be null');
        }
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets value_rank
     *
     * @return int|null
     */
    public function getValueRank()
    {
        return $this->container['value_rank'];
    }

    /**
     * Sets value_rank
     *
     * @param int|null $value_rank value_rank
     *
     * @return self
     */
    public function setValueRank($value_rank)
    {
        if (is_null($value_rank)) {
            throw new \InvalidArgumentException('non-nullable value_rank cannot be null');
        }
        $this->container['value_rank'] = $value_rank;

        return $this;
    }

    /**
     * Gets array_dimensions
     *
     * @return int[]|null
     */
    public function getArrayDimensions()
    {
        return $this->container['array_dimensions'];
    }

    /**
     * Sets array_dimensions
     *
     * @param int[]|null $array_dimensions array_dimensions
     *
     * @return self
     */
    public function setArrayDimensions($array_dimensions)
    {
        if (is_null($array_dimensions)) {
            throw new \InvalidArgumentException('non-nullable array_dimensions cannot be null');
        }
        $this->container['array_dimensions'] = $array_dimensions;

        return $this;
    }

    /**
     * Gets max_string_length
     *
     * @return int|null
     */
    public function getMaxStringLength()
    {
        return $this->container['max_string_length'];
    }

    /**
     * Sets max_string_length
     *
     * @param int|null $max_string_length max_string_length
     *
     * @return self
     */
    public function setMaxStringLength($max_string_length)
    {
        if (is_null($max_string_length)) {
            throw new \InvalidArgumentException('non-nullable max_string_length cannot be null');
        }

        if (($max_string_length > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $max_string_length when calling FieldMetaData., must be smaller than or equal to 4294967295.');
        }
        if (($max_string_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_string_length when calling FieldMetaData., must be bigger than or equal to 0.');
        }

        $this->container['max_string_length'] = $max_string_length;

        return $this;
    }

    /**
     * Gets data_set_field_id
     *
     * @return string|null
     */
    public function getDataSetFieldId()
    {
        return $this->container['data_set_field_id'];
    }

    /**
     * Sets data_set_field_id
     *
     * @param string|null $data_set_field_id data_set_field_id
     *
     * @return self
     */
    public function setDataSetFieldId($data_set_field_id)
    {
        if (is_null($data_set_field_id)) {
            throw new \InvalidArgumentException('non-nullable data_set_field_id cannot be null');
        }
        $this->container['data_set_field_id'] = $data_set_field_id;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \TechDock\OpcUaWebApiClient\Model\KeyValuePair[]|null $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


