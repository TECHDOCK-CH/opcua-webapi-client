<?php
/**
 * MonitoringParameters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * MonitoringParameters Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/7.21).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MonitoringParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MonitoringParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_handle' => 'int',
        'sampling_interval' => 'float',
        'filter' => '\TechDock\OpcUaWebApiClient\Model\ExtensionObject',
        'queue_size' => 'int',
        'discard_oldest' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_handle' => 'int64',
        'sampling_interval' => 'double',
        'filter' => null,
        'queue_size' => 'int64',
        'discard_oldest' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_handle' => false,
        'sampling_interval' => false,
        'filter' => false,
        'queue_size' => false,
        'discard_oldest' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_handle' => 'ClientHandle',
        'sampling_interval' => 'SamplingInterval',
        'filter' => 'Filter',
        'queue_size' => 'QueueSize',
        'discard_oldest' => 'DiscardOldest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_handle' => 'setClientHandle',
        'sampling_interval' => 'setSamplingInterval',
        'filter' => 'setFilter',
        'queue_size' => 'setQueueSize',
        'discard_oldest' => 'setDiscardOldest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_handle' => 'getClientHandle',
        'sampling_interval' => 'getSamplingInterval',
        'filter' => 'getFilter',
        'queue_size' => 'getQueueSize',
        'discard_oldest' => 'getDiscardOldest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_handle', $data ?? [], 0);
        $this->setIfExists('sampling_interval', $data ?? [], 0);
        $this->setIfExists('filter', $data ?? [], null);
        $this->setIfExists('queue_size', $data ?? [], 0);
        $this->setIfExists('discard_oldest', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['client_handle']) && ($this->container['client_handle'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'client_handle', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['client_handle']) && ($this->container['client_handle'] < 0)) {
            $invalidProperties[] = "invalid value for 'client_handle', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['queue_size']) && ($this->container['queue_size'] > 4294967295)) {
            $invalidProperties[] = "invalid value for 'queue_size', must be smaller than or equal to 4294967295.";
        }

        if (!is_null($this->container['queue_size']) && ($this->container['queue_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'queue_size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_handle
     *
     * @return int|null
     */
    public function getClientHandle()
    {
        return $this->container['client_handle'];
    }

    /**
     * Sets client_handle
     *
     * @param int|null $client_handle client_handle
     *
     * @return self
     */
    public function setClientHandle($client_handle)
    {
        if (is_null($client_handle)) {
            throw new \InvalidArgumentException('non-nullable client_handle cannot be null');
        }

        if (($client_handle > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $client_handle when calling MonitoringParameters., must be smaller than or equal to 4294967295.');
        }
        if (($client_handle < 0)) {
            throw new \InvalidArgumentException('invalid value for $client_handle when calling MonitoringParameters., must be bigger than or equal to 0.');
        }

        $this->container['client_handle'] = $client_handle;

        return $this;
    }

    /**
     * Gets sampling_interval
     *
     * @return float|null
     */
    public function getSamplingInterval()
    {
        return $this->container['sampling_interval'];
    }

    /**
     * Sets sampling_interval
     *
     * @param float|null $sampling_interval sampling_interval
     *
     * @return self
     */
    public function setSamplingInterval($sampling_interval)
    {
        if (is_null($sampling_interval)) {
            throw new \InvalidArgumentException('non-nullable sampling_interval cannot be null');
        }
        $this->container['sampling_interval'] = $sampling_interval;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null $filter filter
     *
     * @return self
     */
    public function setFilter($filter)
    {
        if (is_null($filter)) {
            throw new \InvalidArgumentException('non-nullable filter cannot be null');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets queue_size
     *
     * @return int|null
     */
    public function getQueueSize()
    {
        return $this->container['queue_size'];
    }

    /**
     * Sets queue_size
     *
     * @param int|null $queue_size queue_size
     *
     * @return self
     */
    public function setQueueSize($queue_size)
    {
        if (is_null($queue_size)) {
            throw new \InvalidArgumentException('non-nullable queue_size cannot be null');
        }

        if (($queue_size > 4294967295)) {
            throw new \InvalidArgumentException('invalid value for $queue_size when calling MonitoringParameters., must be smaller than or equal to 4294967295.');
        }
        if (($queue_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $queue_size when calling MonitoringParameters., must be bigger than or equal to 0.');
        }

        $this->container['queue_size'] = $queue_size;

        return $this;
    }

    /**
     * Gets discard_oldest
     *
     * @return bool|null
     */
    public function getDiscardOldest()
    {
        return $this->container['discard_oldest'];
    }

    /**
     * Sets discard_oldest
     *
     * @param bool|null $discard_oldest discard_oldest
     *
     * @return self
     */
    public function setDiscardOldest($discard_oldest)
    {
        if (is_null($discard_oldest)) {
            throw new \InvalidArgumentException('non-nullable discard_oldest cannot be null');
        }
        $this->container['discard_oldest'] = $discard_oldest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


