<?php
/**
 * ActivateSessionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Model;

use \ArrayAccess;
use \TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * ActivateSessionRequest Class Doc Comment
 *
 * @category Class
 * @description [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2).
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActivateSessionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActivateSessionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_header' => '\TechDock\OpcUaWebApiClient\Model\RequestHeader',
        'client_signature' => '\TechDock\OpcUaWebApiClient\Model\SignatureData',
        'client_software_certificates' => '\TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]',
        'locale_ids' => 'string[]',
        'user_identity_token' => '\TechDock\OpcUaWebApiClient\Model\ExtensionObject',
        'user_token_signature' => '\TechDock\OpcUaWebApiClient\Model\SignatureData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_header' => null,
        'client_signature' => null,
        'client_software_certificates' => null,
        'locale_ids' => null,
        'user_identity_token' => null,
        'user_token_signature' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_header' => false,
        'client_signature' => false,
        'client_software_certificates' => false,
        'locale_ids' => false,
        'user_identity_token' => false,
        'user_token_signature' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_header' => 'RequestHeader',
        'client_signature' => 'ClientSignature',
        'client_software_certificates' => 'ClientSoftwareCertificates',
        'locale_ids' => 'LocaleIds',
        'user_identity_token' => 'UserIdentityToken',
        'user_token_signature' => 'UserTokenSignature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_header' => 'setRequestHeader',
        'client_signature' => 'setClientSignature',
        'client_software_certificates' => 'setClientSoftwareCertificates',
        'locale_ids' => 'setLocaleIds',
        'user_identity_token' => 'setUserIdentityToken',
        'user_token_signature' => 'setUserTokenSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_header' => 'getRequestHeader',
        'client_signature' => 'getClientSignature',
        'client_software_certificates' => 'getClientSoftwareCertificates',
        'locale_ids' => 'getLocaleIds',
        'user_identity_token' => 'getUserIdentityToken',
        'user_token_signature' => 'getUserTokenSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('request_header', $data ?? [], null);
        $this->setIfExists('client_signature', $data ?? [], null);
        $this->setIfExists('client_software_certificates', $data ?? [], null);
        $this->setIfExists('locale_ids', $data ?? [], null);
        $this->setIfExists('user_identity_token', $data ?? [], null);
        $this->setIfExists('user_token_signature', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_header
     *
     * @return \TechDock\OpcUaWebApiClient\Model\RequestHeader|null
     */
    public function getRequestHeader()
    {
        return $this->container['request_header'];
    }

    /**
     * Sets request_header
     *
     * @param \TechDock\OpcUaWebApiClient\Model\RequestHeader|null $request_header request_header
     *
     * @return self
     */
    public function setRequestHeader($request_header)
    {
        if (is_null($request_header)) {
            throw new \InvalidArgumentException('non-nullable request_header cannot be null');
        }
        $this->container['request_header'] = $request_header;

        return $this;
    }

    /**
     * Gets client_signature
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SignatureData|null
     */
    public function getClientSignature()
    {
        return $this->container['client_signature'];
    }

    /**
     * Sets client_signature
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SignatureData|null $client_signature client_signature
     *
     * @return self
     */
    public function setClientSignature($client_signature)
    {
        if (is_null($client_signature)) {
            throw new \InvalidArgumentException('non-nullable client_signature cannot be null');
        }
        $this->container['client_signature'] = $client_signature;

        return $this;
    }

    /**
     * Gets client_software_certificates
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]|null
     */
    public function getClientSoftwareCertificates()
    {
        return $this->container['client_software_certificates'];
    }

    /**
     * Sets client_software_certificates
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SignedSoftwareCertificate[]|null $client_software_certificates client_software_certificates
     *
     * @return self
     */
    public function setClientSoftwareCertificates($client_software_certificates)
    {
        if (is_null($client_software_certificates)) {
            throw new \InvalidArgumentException('non-nullable client_software_certificates cannot be null');
        }
        $this->container['client_software_certificates'] = $client_software_certificates;

        return $this;
    }

    /**
     * Gets locale_ids
     *
     * @return string[]|null
     */
    public function getLocaleIds()
    {
        return $this->container['locale_ids'];
    }

    /**
     * Sets locale_ids
     *
     * @param string[]|null $locale_ids locale_ids
     *
     * @return self
     */
    public function setLocaleIds($locale_ids)
    {
        if (is_null($locale_ids)) {
            throw new \InvalidArgumentException('non-nullable locale_ids cannot be null');
        }
        $this->container['locale_ids'] = $locale_ids;

        return $this;
    }

    /**
     * Gets user_identity_token
     *
     * @return \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null
     */
    public function getUserIdentityToken()
    {
        return $this->container['user_identity_token'];
    }

    /**
     * Sets user_identity_token
     *
     * @param \TechDock\OpcUaWebApiClient\Model\ExtensionObject|null $user_identity_token user_identity_token
     *
     * @return self
     */
    public function setUserIdentityToken($user_identity_token)
    {
        if (is_null($user_identity_token)) {
            throw new \InvalidArgumentException('non-nullable user_identity_token cannot be null');
        }
        $this->container['user_identity_token'] = $user_identity_token;

        return $this;
    }

    /**
     * Gets user_token_signature
     *
     * @return \TechDock\OpcUaWebApiClient\Model\SignatureData|null
     */
    public function getUserTokenSignature()
    {
        return $this->container['user_token_signature'];
    }

    /**
     * Sets user_token_signature
     *
     * @param \TechDock\OpcUaWebApiClient\Model\SignatureData|null $user_token_signature user_token_signature
     *
     * @return self
     */
    public function setUserTokenSignature($user_token_signature)
    {
        if (is_null($user_token_signature)) {
            throw new \InvalidArgumentException('non-nullable user_token_signature cannot be null');
        }
        $this->container['user_token_signature'] = $user_token_signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


