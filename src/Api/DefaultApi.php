<?php
/**
 * DefaultApi
 * PHP version 8.1
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OPC UA Web API
 *
 * Provides simple HTTPS based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: info@techdock.ch
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TechDock\OpcUaWebApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use TechDock\OpcUaWebApiClient\ApiException;
use TechDock\OpcUaWebApiClient\Configuration;
use TechDock\OpcUaWebApiClient\FormDataProcessor;
use TechDock\OpcUaWebApiClient\HeaderSelector;
use TechDock\OpcUaWebApiClient\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  TechDock\OpcUaWebApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateSession' => [
            'application/json',
        ],
        'browse' => [
            'application/json',
        ],
        'browseNext' => [
            'application/json',
        ],
        'call' => [
            'application/json',
        ],
        'cancel' => [
            'application/json',
        ],
        'closeSession' => [
            'application/json',
        ],
        'createMonitoredItems' => [
            'application/json',
        ],
        'createSession' => [
            'application/json',
        ],
        'createSubscription' => [
            'application/json',
        ],
        'deleteMonitoredItems' => [
            'application/json',
        ],
        'deleteSubscriptions' => [
            'application/json',
        ],
        'findServers' => [
            'application/json',
        ],
        'getEndpoints' => [
            'application/json',
        ],
        'historyRead' => [
            'application/json',
        ],
        'historyUpdate' => [
            'application/json',
        ],
        'modifyMonitoredItems' => [
            'application/json',
        ],
        'modifySubscription' => [
            'application/json',
        ],
        'publish' => [
            'application/json',
        ],
        'read' => [
            'application/json',
        ],
        'registerNodes' => [
            'application/json',
        ],
        'republish' => [
            'application/json',
        ],
        'setMonitoringMode' => [
            'application/json',
        ],
        'setPublishingMode' => [
            'application/json',
        ],
        'setTriggering' => [
            'application/json',
        ],
        'transferSubscriptions' => [
            'application/json',
        ],
        'translateBrowsePathsToNodeIds' => [
            'application/json',
        ],
        'unregisterNodes' => [
            'application/json',
        ],
        'write' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateSession
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ActivateSessionRequest|null $activate_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse
     */
    public function activateSession($activate_session_request = null, string $contentType = self::contentTypes['activateSession'][0])
    {
        list($response) = $this->activateSessionWithHttpInfo($activate_session_request, $contentType);
        return $response;
    }

    /**
     * Operation activateSessionWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ActivateSessionRequest|null $activate_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateSessionWithHttpInfo($activate_session_request = null, string $contentType = self::contentTypes['activateSession'][0])
    {
        $request = $this->activateSessionRequest($activate_session_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation activateSessionAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ActivateSessionRequest|null $activate_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSessionAsync($activate_session_request = null, string $contentType = self::contentTypes['activateSession'][0])
    {
        return $this->activateSessionAsyncWithHttpInfo($activate_session_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateSessionAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ActivateSessionRequest|null $activate_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSessionAsyncWithHttpInfo($activate_session_request = null, string $contentType = self::contentTypes['activateSession'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\ActivateSessionResponse';
        $request = $this->activateSessionRequest($activate_session_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateSession'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ActivateSessionRequest|null $activate_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.3/#5.7.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateSessionRequest($activate_session_request = null, string $contentType = self::contentTypes['activateSession'][0])
    {



        $resourcePath = '/activatesession';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($activate_session_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($activate_session_request));
            } else {
                $httpBody = $activate_session_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browse
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseRequest|null $browse_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browse'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\BrowseResponse
     */
    public function browse($browse_request = null, string $contentType = self::contentTypes['browse'][0])
    {
        list($response) = $this->browseWithHttpInfo($browse_request, $contentType);
        return $response;
    }

    /**
     * Operation browseWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseRequest|null $browse_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browse'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\BrowseResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseWithHttpInfo($browse_request = null, string $contentType = self::contentTypes['browse'][0])
    {
        $request = $this->browseRequest($browse_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\BrowseResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\BrowseResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\BrowseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation browseAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseRequest|null $browse_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseAsync($browse_request = null, string $contentType = self::contentTypes['browse'][0])
    {
        return $this->browseAsyncWithHttpInfo($browse_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseRequest|null $browse_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseAsyncWithHttpInfo($browse_request = null, string $contentType = self::contentTypes['browse'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\BrowseResponse';
        $request = $this->browseRequest($browse_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browse'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseRequest|null $browse_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.2/#5.9.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseRequest($browse_request = null, string $contentType = self::contentTypes['browse'][0])
    {



        $resourcePath = '/browse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($browse_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($browse_request));
            } else {
                $httpBody = $browse_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseNext
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseNextRequest|null $browse_next_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.3/#5.9.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browseNext'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\BrowseNextResponse
     */
    public function browseNext($browse_next_request = null, string $contentType = self::contentTypes['browseNext'][0])
    {
        list($response) = $this->browseNextWithHttpInfo($browse_next_request, $contentType);
        return $response;
    }

    /**
     * Operation browseNextWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseNextRequest|null $browse_next_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.3/#5.9.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browseNext'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\BrowseNextResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseNextWithHttpInfo($browse_next_request = null, string $contentType = self::contentTypes['browseNext'][0])
    {
        $request = $this->browseNextRequest($browse_next_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\BrowseNextResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\BrowseNextResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\BrowseNextResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation browseNextAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseNextRequest|null $browse_next_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.3/#5.9.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browseNext'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseNextAsync($browse_next_request = null, string $contentType = self::contentTypes['browseNext'][0])
    {
        return $this->browseNextAsyncWithHttpInfo($browse_next_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseNextAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseNextRequest|null $browse_next_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.3/#5.9.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browseNext'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseNextAsyncWithHttpInfo($browse_next_request = null, string $contentType = self::contentTypes['browseNext'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\BrowseNextResponse';
        $request = $this->browseNextRequest($browse_next_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseNext'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\BrowseNextRequest|null $browse_next_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.3/#5.9.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['browseNext'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function browseNextRequest($browse_next_request = null, string $contentType = self::contentTypes['browseNext'][0])
    {



        $resourcePath = '/browsenext';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($browse_next_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($browse_next_request));
            } else {
                $httpBody = $browse_next_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CallRequest|null $call_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.12.2/#5.12.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CallResponse
     */
    public function call($call_request = null, string $contentType = self::contentTypes['call'][0])
    {
        list($response) = $this->callWithHttpInfo($call_request, $contentType);
        return $response;
    }

    /**
     * Operation callWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CallRequest|null $call_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.12.2/#5.12.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CallResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function callWithHttpInfo($call_request = null, string $contentType = self::contentTypes['call'][0])
    {
        $request = $this->callRequest($call_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CallResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CallResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CallResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation callAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CallRequest|null $call_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.12.2/#5.12.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callAsync($call_request = null, string $contentType = self::contentTypes['call'][0])
    {
        return $this->callAsyncWithHttpInfo($call_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation callAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CallRequest|null $call_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.12.2/#5.12.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function callAsyncWithHttpInfo($call_request = null, string $contentType = self::contentTypes['call'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CallResponse';
        $request = $this->callRequest($call_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CallRequest|null $call_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.12.2/#5.12.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function callRequest($call_request = null, string $contentType = self::contentTypes['call'][0])
    {



        $resourcePath = '/call';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($call_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($call_request));
            } else {
                $httpBody = $call_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancel
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CancelRequest|null $cancel_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.5/#5.7.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CancelResponse
     */
    public function cancel($cancel_request = null, string $contentType = self::contentTypes['cancel'][0])
    {
        list($response) = $this->cancelWithHttpInfo($cancel_request, $contentType);
        return $response;
    }

    /**
     * Operation cancelWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CancelRequest|null $cancel_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.5/#5.7.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CancelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelWithHttpInfo($cancel_request = null, string $contentType = self::contentTypes['cancel'][0])
    {
        $request = $this->cancelRequest($cancel_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CancelResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CancelResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CancelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation cancelAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CancelRequest|null $cancel_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.5/#5.7.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAsync($cancel_request = null, string $contentType = self::contentTypes['cancel'][0])
    {
        return $this->cancelAsyncWithHttpInfo($cancel_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CancelRequest|null $cancel_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.5/#5.7.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAsyncWithHttpInfo($cancel_request = null, string $contentType = self::contentTypes['cancel'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CancelResponse';
        $request = $this->cancelRequest($cancel_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancel'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CancelRequest|null $cancel_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.5/#5.7.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelRequest($cancel_request = null, string $contentType = self::contentTypes['cancel'][0])
    {



        $resourcePath = '/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cancel_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($cancel_request));
            } else {
                $httpBody = $cancel_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation closeSession
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CloseSessionRequest|null $close_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.4/#5.7.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CloseSessionResponse
     */
    public function closeSession($close_session_request = null, string $contentType = self::contentTypes['closeSession'][0])
    {
        list($response) = $this->closeSessionWithHttpInfo($close_session_request, $contentType);
        return $response;
    }

    /**
     * Operation closeSessionWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CloseSessionRequest|null $close_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.4/#5.7.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CloseSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeSessionWithHttpInfo($close_session_request = null, string $contentType = self::contentTypes['closeSession'][0])
    {
        $request = $this->closeSessionRequest($close_session_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CloseSessionResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CloseSessionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CloseSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation closeSessionAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CloseSessionRequest|null $close_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.4/#5.7.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeSessionAsync($close_session_request = null, string $contentType = self::contentTypes['closeSession'][0])
    {
        return $this->closeSessionAsyncWithHttpInfo($close_session_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation closeSessionAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CloseSessionRequest|null $close_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.4/#5.7.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeSessionAsyncWithHttpInfo($close_session_request = null, string $contentType = self::contentTypes['closeSession'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CloseSessionResponse';
        $request = $this->closeSessionRequest($close_session_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeSession'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CloseSessionRequest|null $close_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.4/#5.7.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function closeSessionRequest($close_session_request = null, string $contentType = self::contentTypes['closeSession'][0])
    {



        $resourcePath = '/closesession';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($close_session_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($close_session_request));
            } else {
                $httpBody = $close_session_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMonitoredItems
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsRequest|null $create_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.2/#5.13.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse
     */
    public function createMonitoredItems($create_monitored_items_request = null, string $contentType = self::contentTypes['createMonitoredItems'][0])
    {
        list($response) = $this->createMonitoredItemsWithHttpInfo($create_monitored_items_request, $contentType);
        return $response;
    }

    /**
     * Operation createMonitoredItemsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsRequest|null $create_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.2/#5.13.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMonitoredItemsWithHttpInfo($create_monitored_items_request = null, string $contentType = self::contentTypes['createMonitoredItems'][0])
    {
        $request = $this->createMonitoredItemsRequest($create_monitored_items_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createMonitoredItemsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsRequest|null $create_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.2/#5.13.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMonitoredItemsAsync($create_monitored_items_request = null, string $contentType = self::contentTypes['createMonitoredItems'][0])
    {
        return $this->createMonitoredItemsAsyncWithHttpInfo($create_monitored_items_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMonitoredItemsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsRequest|null $create_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.2/#5.13.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMonitoredItemsAsyncWithHttpInfo($create_monitored_items_request = null, string $contentType = self::contentTypes['createMonitoredItems'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsResponse';
        $request = $this->createMonitoredItemsRequest($create_monitored_items_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMonitoredItems'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateMonitoredItemsRequest|null $create_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.2/#5.13.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMonitoredItemsRequest($create_monitored_items_request = null, string $contentType = self::contentTypes['createMonitoredItems'][0])
    {



        $resourcePath = '/createmonitoreditems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_monitored_items_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_monitored_items_request));
            } else {
                $httpBody = $create_monitored_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSession
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSessionRequest|null $create_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CreateSessionResponse
     */
    public function createSession($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        list($response) = $this->createSessionWithHttpInfo($create_session_request, $contentType);
        return $response;
    }

    /**
     * Operation createSessionWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSessionRequest|null $create_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CreateSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSessionWithHttpInfo($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        $request = $this->createSessionRequest($create_session_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CreateSessionResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CreateSessionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CreateSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createSessionAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSessionRequest|null $create_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsync($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        return $this->createSessionAsyncWithHttpInfo($create_session_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSessionAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSessionRequest|null $create_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsyncWithHttpInfo($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CreateSessionResponse';
        $request = $this->createSessionRequest($create_session_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSession'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSessionRequest|null $create_session_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.7.2/#5.7.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSessionRequest($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {



        $resourcePath = '/createsession';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_session_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_session_request));
            } else {
                $httpBody = $create_session_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscription
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionRequest|null $create_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.2/#5.14.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse
     */
    public function createSubscription($create_subscription_request = null, string $contentType = self::contentTypes['createSubscription'][0])
    {
        list($response) = $this->createSubscriptionWithHttpInfo($create_subscription_request, $contentType);
        return $response;
    }

    /**
     * Operation createSubscriptionWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionRequest|null $create_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.2/#5.14.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithHttpInfo($create_subscription_request = null, string $contentType = self::contentTypes['createSubscription'][0])
    {
        $request = $this->createSubscriptionRequest($create_subscription_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionRequest|null $create_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.2/#5.14.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsync($create_subscription_request = null, string $contentType = self::contentTypes['createSubscription'][0])
    {
        return $this->createSubscriptionAsyncWithHttpInfo($create_subscription_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionRequest|null $create_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.2/#5.14.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsyncWithHttpInfo($create_subscription_request = null, string $contentType = self::contentTypes['createSubscription'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\CreateSubscriptionResponse';
        $request = $this->createSubscriptionRequest($create_subscription_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscription'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\CreateSubscriptionRequest|null $create_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.2/#5.14.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSubscriptionRequest($create_subscription_request = null, string $contentType = self::contentTypes['createSubscription'][0])
    {



        $resourcePath = '/createsubscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_subscription_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_subscription_request));
            } else {
                $httpBody = $create_subscription_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMonitoredItems
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsRequest|null $delete_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.6/#5.13.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse
     */
    public function deleteMonitoredItems($delete_monitored_items_request = null, string $contentType = self::contentTypes['deleteMonitoredItems'][0])
    {
        list($response) = $this->deleteMonitoredItemsWithHttpInfo($delete_monitored_items_request, $contentType);
        return $response;
    }

    /**
     * Operation deleteMonitoredItemsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsRequest|null $delete_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.6/#5.13.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMonitoredItemsWithHttpInfo($delete_monitored_items_request = null, string $contentType = self::contentTypes['deleteMonitoredItems'][0])
    {
        $request = $this->deleteMonitoredItemsRequest($delete_monitored_items_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteMonitoredItemsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsRequest|null $delete_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.6/#5.13.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMonitoredItemsAsync($delete_monitored_items_request = null, string $contentType = self::contentTypes['deleteMonitoredItems'][0])
    {
        return $this->deleteMonitoredItemsAsyncWithHttpInfo($delete_monitored_items_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMonitoredItemsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsRequest|null $delete_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.6/#5.13.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMonitoredItemsAsyncWithHttpInfo($delete_monitored_items_request = null, string $contentType = self::contentTypes['deleteMonitoredItems'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsResponse';
        $request = $this->deleteMonitoredItemsRequest($delete_monitored_items_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMonitoredItems'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteMonitoredItemsRequest|null $delete_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.6/#5.13.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMonitoredItemsRequest($delete_monitored_items_request = null, string $contentType = self::contentTypes['deleteMonitoredItems'][0])
    {



        $resourcePath = '/deletemonitoreditems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_monitored_items_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_monitored_items_request));
            } else {
                $httpBody = $delete_monitored_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptions
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsRequest|null $delete_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.8/#5.14.8.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptions'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse
     */
    public function deleteSubscriptions($delete_subscriptions_request = null, string $contentType = self::contentTypes['deleteSubscriptions'][0])
    {
        list($response) = $this->deleteSubscriptionsWithHttpInfo($delete_subscriptions_request, $contentType);
        return $response;
    }

    /**
     * Operation deleteSubscriptionsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsRequest|null $delete_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.8/#5.14.8.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptions'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionsWithHttpInfo($delete_subscriptions_request = null, string $contentType = self::contentTypes['deleteSubscriptions'][0])
    {
        $request = $this->deleteSubscriptionsRequest($delete_subscriptions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsRequest|null $delete_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.8/#5.14.8.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionsAsync($delete_subscriptions_request = null, string $contentType = self::contentTypes['deleteSubscriptions'][0])
    {
        return $this->deleteSubscriptionsAsyncWithHttpInfo($delete_subscriptions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsRequest|null $delete_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.8/#5.14.8.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionsAsyncWithHttpInfo($delete_subscriptions_request = null, string $contentType = self::contentTypes['deleteSubscriptions'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsResponse';
        $request = $this->deleteSubscriptionsRequest($delete_subscriptions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptions'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\DeleteSubscriptionsRequest|null $delete_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.8/#5.14.8.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSubscriptionsRequest($delete_subscriptions_request = null, string $contentType = self::contentTypes['deleteSubscriptions'][0])
    {



        $resourcePath = '/deletesubscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_subscriptions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_subscriptions_request));
            } else {
                $httpBody = $delete_subscriptions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findServers
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\FindServersRequest|null $find_servers_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.2/#5.5.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findServers'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\FindServersResponse
     */
    public function findServers($find_servers_request = null, string $contentType = self::contentTypes['findServers'][0])
    {
        list($response) = $this->findServersWithHttpInfo($find_servers_request, $contentType);
        return $response;
    }

    /**
     * Operation findServersWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\FindServersRequest|null $find_servers_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.2/#5.5.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findServers'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\FindServersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findServersWithHttpInfo($find_servers_request = null, string $contentType = self::contentTypes['findServers'][0])
    {
        $request = $this->findServersRequest($find_servers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\FindServersResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\FindServersResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\FindServersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation findServersAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\FindServersRequest|null $find_servers_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.2/#5.5.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findServersAsync($find_servers_request = null, string $contentType = self::contentTypes['findServers'][0])
    {
        return $this->findServersAsyncWithHttpInfo($find_servers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findServersAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\FindServersRequest|null $find_servers_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.2/#5.5.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findServersAsyncWithHttpInfo($find_servers_request = null, string $contentType = self::contentTypes['findServers'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\FindServersResponse';
        $request = $this->findServersRequest($find_servers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findServers'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\FindServersRequest|null $find_servers_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.2/#5.5.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findServers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findServersRequest($find_servers_request = null, string $contentType = self::contentTypes['findServers'][0])
    {



        $resourcePath = '/findservers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($find_servers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($find_servers_request));
            } else {
                $httpBody = $find_servers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpoints
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\GetEndpointsRequest|null $get_endpoints_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.4/#5.5.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpoints'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse
     */
    public function getEndpoints($get_endpoints_request = null, string $contentType = self::contentTypes['getEndpoints'][0])
    {
        list($response) = $this->getEndpointsWithHttpInfo($get_endpoints_request, $contentType);
        return $response;
    }

    /**
     * Operation getEndpointsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\GetEndpointsRequest|null $get_endpoints_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.4/#5.5.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpoints'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointsWithHttpInfo($get_endpoints_request = null, string $contentType = self::contentTypes['getEndpoints'][0])
    {
        $request = $this->getEndpointsRequest($get_endpoints_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation getEndpointsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\GetEndpointsRequest|null $get_endpoints_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.4/#5.5.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointsAsync($get_endpoints_request = null, string $contentType = self::contentTypes['getEndpoints'][0])
    {
        return $this->getEndpointsAsyncWithHttpInfo($get_endpoints_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\GetEndpointsRequest|null $get_endpoints_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.4/#5.5.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointsAsyncWithHttpInfo($get_endpoints_request = null, string $contentType = self::contentTypes['getEndpoints'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\GetEndpointsResponse';
        $request = $this->getEndpointsRequest($get_endpoints_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpoints'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\GetEndpointsRequest|null $get_endpoints_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.5.4/#5.5.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpoints'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointsRequest($get_endpoints_request = null, string $contentType = self::contentTypes['getEndpoints'][0])
    {



        $resourcePath = '/getendpoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_endpoints_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_endpoints_request));
            } else {
                $httpBody = $get_endpoints_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation historyRead
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryReadRequest|null $history_read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.3/#5.11.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyRead'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\HistoryReadResponse
     */
    public function historyRead($history_read_request = null, string $contentType = self::contentTypes['historyRead'][0])
    {
        list($response) = $this->historyReadWithHttpInfo($history_read_request, $contentType);
        return $response;
    }

    /**
     * Operation historyReadWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryReadRequest|null $history_read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.3/#5.11.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyRead'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\HistoryReadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function historyReadWithHttpInfo($history_read_request = null, string $contentType = self::contentTypes['historyRead'][0])
    {
        $request = $this->historyReadRequest($history_read_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\HistoryReadResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\HistoryReadResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\HistoryReadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation historyReadAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryReadRequest|null $history_read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.3/#5.11.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historyReadAsync($history_read_request = null, string $contentType = self::contentTypes['historyRead'][0])
    {
        return $this->historyReadAsyncWithHttpInfo($history_read_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation historyReadAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryReadRequest|null $history_read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.3/#5.11.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historyReadAsyncWithHttpInfo($history_read_request = null, string $contentType = self::contentTypes['historyRead'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\HistoryReadResponse';
        $request = $this->historyReadRequest($history_read_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'historyRead'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryReadRequest|null $history_read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.3/#5.11.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyRead'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function historyReadRequest($history_read_request = null, string $contentType = self::contentTypes['historyRead'][0])
    {



        $resourcePath = '/historyread';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($history_read_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($history_read_request));
            } else {
                $httpBody = $history_read_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation historyUpdate
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryUpdateRequest|null $history_update_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.5/#5.11.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyUpdate'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse
     */
    public function historyUpdate($history_update_request = null, string $contentType = self::contentTypes['historyUpdate'][0])
    {
        list($response) = $this->historyUpdateWithHttpInfo($history_update_request, $contentType);
        return $response;
    }

    /**
     * Operation historyUpdateWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryUpdateRequest|null $history_update_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.5/#5.11.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyUpdate'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function historyUpdateWithHttpInfo($history_update_request = null, string $contentType = self::contentTypes['historyUpdate'][0])
    {
        $request = $this->historyUpdateRequest($history_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation historyUpdateAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryUpdateRequest|null $history_update_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.5/#5.11.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historyUpdateAsync($history_update_request = null, string $contentType = self::contentTypes['historyUpdate'][0])
    {
        return $this->historyUpdateAsyncWithHttpInfo($history_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation historyUpdateAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryUpdateRequest|null $history_update_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.5/#5.11.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function historyUpdateAsyncWithHttpInfo($history_update_request = null, string $contentType = self::contentTypes['historyUpdate'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\HistoryUpdateResponse';
        $request = $this->historyUpdateRequest($history_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'historyUpdate'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\HistoryUpdateRequest|null $history_update_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.5/#5.11.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['historyUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function historyUpdateRequest($history_update_request = null, string $contentType = self::contentTypes['historyUpdate'][0])
    {



        $resourcePath = '/historyupdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($history_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($history_update_request));
            } else {
                $httpBody = $history_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyMonitoredItems
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsRequest|null $modify_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.3/#5.13.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse
     */
    public function modifyMonitoredItems($modify_monitored_items_request = null, string $contentType = self::contentTypes['modifyMonitoredItems'][0])
    {
        list($response) = $this->modifyMonitoredItemsWithHttpInfo($modify_monitored_items_request, $contentType);
        return $response;
    }

    /**
     * Operation modifyMonitoredItemsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsRequest|null $modify_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.3/#5.13.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyMonitoredItems'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyMonitoredItemsWithHttpInfo($modify_monitored_items_request = null, string $contentType = self::contentTypes['modifyMonitoredItems'][0])
    {
        $request = $this->modifyMonitoredItemsRequest($modify_monitored_items_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation modifyMonitoredItemsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsRequest|null $modify_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.3/#5.13.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyMonitoredItemsAsync($modify_monitored_items_request = null, string $contentType = self::contentTypes['modifyMonitoredItems'][0])
    {
        return $this->modifyMonitoredItemsAsyncWithHttpInfo($modify_monitored_items_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyMonitoredItemsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsRequest|null $modify_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.3/#5.13.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyMonitoredItemsAsyncWithHttpInfo($modify_monitored_items_request = null, string $contentType = self::contentTypes['modifyMonitoredItems'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsResponse';
        $request = $this->modifyMonitoredItemsRequest($modify_monitored_items_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyMonitoredItems'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifyMonitoredItemsRequest|null $modify_monitored_items_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.3/#5.13.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifyMonitoredItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modifyMonitoredItemsRequest($modify_monitored_items_request = null, string $contentType = self::contentTypes['modifyMonitoredItems'][0])
    {



        $resourcePath = '/modifymonitoreditems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_monitored_items_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($modify_monitored_items_request));
            } else {
                $httpBody = $modify_monitored_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifySubscription
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionRequest|null $modify_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.3/#5.14.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifySubscription'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse
     */
    public function modifySubscription($modify_subscription_request = null, string $contentType = self::contentTypes['modifySubscription'][0])
    {
        list($response) = $this->modifySubscriptionWithHttpInfo($modify_subscription_request, $contentType);
        return $response;
    }

    /**
     * Operation modifySubscriptionWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionRequest|null $modify_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.3/#5.14.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifySubscription'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifySubscriptionWithHttpInfo($modify_subscription_request = null, string $contentType = self::contentTypes['modifySubscription'][0])
    {
        $request = $this->modifySubscriptionRequest($modify_subscription_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation modifySubscriptionAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionRequest|null $modify_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.3/#5.14.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifySubscriptionAsync($modify_subscription_request = null, string $contentType = self::contentTypes['modifySubscription'][0])
    {
        return $this->modifySubscriptionAsyncWithHttpInfo($modify_subscription_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifySubscriptionAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionRequest|null $modify_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.3/#5.14.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifySubscriptionAsyncWithHttpInfo($modify_subscription_request = null, string $contentType = self::contentTypes['modifySubscription'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\ModifySubscriptionResponse';
        $request = $this->modifySubscriptionRequest($modify_subscription_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifySubscription'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ModifySubscriptionRequest|null $modify_subscription_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.3/#5.14.3.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['modifySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function modifySubscriptionRequest($modify_subscription_request = null, string $contentType = self::contentTypes['modifySubscription'][0])
    {



        $resourcePath = '/modifysubscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modify_subscription_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($modify_subscription_request));
            } else {
                $httpBody = $modify_subscription_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publish
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\PublishRequest|null $publish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.5/#5.14.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publish'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\PublishResponse
     */
    public function publish($publish_request = null, string $contentType = self::contentTypes['publish'][0])
    {
        list($response) = $this->publishWithHttpInfo($publish_request, $contentType);
        return $response;
    }

    /**
     * Operation publishWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\PublishRequest|null $publish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.5/#5.14.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publish'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\PublishResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function publishWithHttpInfo($publish_request = null, string $contentType = self::contentTypes['publish'][0])
    {
        $request = $this->publishRequest($publish_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\PublishResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\PublishResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\PublishResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation publishAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\PublishRequest|null $publish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.5/#5.14.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishAsync($publish_request = null, string $contentType = self::contentTypes['publish'][0])
    {
        return $this->publishAsyncWithHttpInfo($publish_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation publishAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\PublishRequest|null $publish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.5/#5.14.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publishAsyncWithHttpInfo($publish_request = null, string $contentType = self::contentTypes['publish'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\PublishResponse';
        $request = $this->publishRequest($publish_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'publish'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\PublishRequest|null $publish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.5/#5.14.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['publish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function publishRequest($publish_request = null, string $contentType = self::contentTypes['publish'][0])
    {



        $resourcePath = '/publish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($publish_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($publish_request));
            } else {
                $httpBody = $publish_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation read
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ReadRequest|null $read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.2/#5.11.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['read'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\ReadResponse
     */
    public function read($read_request = null, string $contentType = self::contentTypes['read'][0])
    {
        list($response) = $this->readWithHttpInfo($read_request, $contentType);
        return $response;
    }

    /**
     * Operation readWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ReadRequest|null $read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.2/#5.11.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['read'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\ReadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function readWithHttpInfo($read_request = null, string $contentType = self::contentTypes['read'][0])
    {
        $request = $this->readRequest($read_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\ReadResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\ReadResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\ReadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation readAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ReadRequest|null $read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.2/#5.11.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['read'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAsync($read_request = null, string $contentType = self::contentTypes['read'][0])
    {
        return $this->readAsyncWithHttpInfo($read_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ReadRequest|null $read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.2/#5.11.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['read'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readAsyncWithHttpInfo($read_request = null, string $contentType = self::contentTypes['read'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\ReadResponse';
        $request = $this->readRequest($read_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'read'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\ReadRequest|null $read_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.2/#5.11.2.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['read'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readRequest($read_request = null, string $contentType = self::contentTypes['read'][0])
    {



        $resourcePath = '/read';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($read_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($read_request));
            } else {
                $httpBody = $read_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerNodes
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RegisterNodesRequest|null $register_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.5/#5.9.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerNodes'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse
     */
    public function registerNodes($register_nodes_request = null, string $contentType = self::contentTypes['registerNodes'][0])
    {
        list($response) = $this->registerNodesWithHttpInfo($register_nodes_request, $contentType);
        return $response;
    }

    /**
     * Operation registerNodesWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RegisterNodesRequest|null $register_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.5/#5.9.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerNodes'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerNodesWithHttpInfo($register_nodes_request = null, string $contentType = self::contentTypes['registerNodes'][0])
    {
        $request = $this->registerNodesRequest($register_nodes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation registerNodesAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RegisterNodesRequest|null $register_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.5/#5.9.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerNodesAsync($register_nodes_request = null, string $contentType = self::contentTypes['registerNodes'][0])
    {
        return $this->registerNodesAsyncWithHttpInfo($register_nodes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerNodesAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RegisterNodesRequest|null $register_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.5/#5.9.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerNodesAsyncWithHttpInfo($register_nodes_request = null, string $contentType = self::contentTypes['registerNodes'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\RegisterNodesResponse';
        $request = $this->registerNodesRequest($register_nodes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerNodes'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RegisterNodesRequest|null $register_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.5/#5.9.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['registerNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerNodesRequest($register_nodes_request = null, string $contentType = self::contentTypes['registerNodes'][0])
    {



        $resourcePath = '/registernodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($register_nodes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($register_nodes_request));
            } else {
                $httpBody = $register_nodes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation republish
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RepublishRequest|null $republish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.6/#5.14.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['republish'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\RepublishResponse
     */
    public function republish($republish_request = null, string $contentType = self::contentTypes['republish'][0])
    {
        list($response) = $this->republishWithHttpInfo($republish_request, $contentType);
        return $response;
    }

    /**
     * Operation republishWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RepublishRequest|null $republish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.6/#5.14.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['republish'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\RepublishResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function republishWithHttpInfo($republish_request = null, string $contentType = self::contentTypes['republish'][0])
    {
        $request = $this->republishRequest($republish_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\RepublishResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\RepublishResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\RepublishResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation republishAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RepublishRequest|null $republish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.6/#5.14.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['republish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function republishAsync($republish_request = null, string $contentType = self::contentTypes['republish'][0])
    {
        return $this->republishAsyncWithHttpInfo($republish_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation republishAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RepublishRequest|null $republish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.6/#5.14.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['republish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function republishAsyncWithHttpInfo($republish_request = null, string $contentType = self::contentTypes['republish'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\RepublishResponse';
        $request = $this->republishRequest($republish_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'republish'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\RepublishRequest|null $republish_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.6/#5.14.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['republish'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function republishRequest($republish_request = null, string $contentType = self::contentTypes['republish'][0])
    {



        $resourcePath = '/republish';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($republish_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($republish_request));
            } else {
                $httpBody = $republish_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMonitoringMode
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeRequest|null $set_monitoring_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.4/#5.13.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonitoringMode'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse
     */
    public function setMonitoringMode($set_monitoring_mode_request = null, string $contentType = self::contentTypes['setMonitoringMode'][0])
    {
        list($response) = $this->setMonitoringModeWithHttpInfo($set_monitoring_mode_request, $contentType);
        return $response;
    }

    /**
     * Operation setMonitoringModeWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeRequest|null $set_monitoring_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.4/#5.13.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonitoringMode'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMonitoringModeWithHttpInfo($set_monitoring_mode_request = null, string $contentType = self::contentTypes['setMonitoringMode'][0])
    {
        $request = $this->setMonitoringModeRequest($set_monitoring_mode_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation setMonitoringModeAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeRequest|null $set_monitoring_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.4/#5.13.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonitoringMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMonitoringModeAsync($set_monitoring_mode_request = null, string $contentType = self::contentTypes['setMonitoringMode'][0])
    {
        return $this->setMonitoringModeAsyncWithHttpInfo($set_monitoring_mode_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMonitoringModeAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeRequest|null $set_monitoring_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.4/#5.13.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonitoringMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMonitoringModeAsyncWithHttpInfo($set_monitoring_mode_request = null, string $contentType = self::contentTypes['setMonitoringMode'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\SetMonitoringModeResponse';
        $request = $this->setMonitoringModeRequest($set_monitoring_mode_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMonitoringMode'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetMonitoringModeRequest|null $set_monitoring_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.4/#5.13.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMonitoringMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setMonitoringModeRequest($set_monitoring_mode_request = null, string $contentType = self::contentTypes['setMonitoringMode'][0])
    {



        $resourcePath = '/setmonitoringmode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_monitoring_mode_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_monitoring_mode_request));
            } else {
                $httpBody = $set_monitoring_mode_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPublishingMode
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetPublishingModeRequest|null $set_publishing_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.4/#5.14.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPublishingMode'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse
     */
    public function setPublishingMode($set_publishing_mode_request = null, string $contentType = self::contentTypes['setPublishingMode'][0])
    {
        list($response) = $this->setPublishingModeWithHttpInfo($set_publishing_mode_request, $contentType);
        return $response;
    }

    /**
     * Operation setPublishingModeWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetPublishingModeRequest|null $set_publishing_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.4/#5.14.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPublishingMode'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPublishingModeWithHttpInfo($set_publishing_mode_request = null, string $contentType = self::contentTypes['setPublishingMode'][0])
    {
        $request = $this->setPublishingModeRequest($set_publishing_mode_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation setPublishingModeAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetPublishingModeRequest|null $set_publishing_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.4/#5.14.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPublishingMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPublishingModeAsync($set_publishing_mode_request = null, string $contentType = self::contentTypes['setPublishingMode'][0])
    {
        return $this->setPublishingModeAsyncWithHttpInfo($set_publishing_mode_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPublishingModeAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetPublishingModeRequest|null $set_publishing_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.4/#5.14.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPublishingMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPublishingModeAsyncWithHttpInfo($set_publishing_mode_request = null, string $contentType = self::contentTypes['setPublishingMode'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\SetPublishingModeResponse';
        $request = $this->setPublishingModeRequest($set_publishing_mode_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPublishingMode'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetPublishingModeRequest|null $set_publishing_mode_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.4/#5.14.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setPublishingMode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setPublishingModeRequest($set_publishing_mode_request = null, string $contentType = self::contentTypes['setPublishingMode'][0])
    {



        $resourcePath = '/setpublishingmode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_publishing_mode_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_publishing_mode_request));
            } else {
                $httpBody = $set_publishing_mode_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setTriggering
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetTriggeringRequest|null $set_triggering_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.5/#5.13.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTriggering'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse
     */
    public function setTriggering($set_triggering_request = null, string $contentType = self::contentTypes['setTriggering'][0])
    {
        list($response) = $this->setTriggeringWithHttpInfo($set_triggering_request, $contentType);
        return $response;
    }

    /**
     * Operation setTriggeringWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetTriggeringRequest|null $set_triggering_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.5/#5.13.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTriggering'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setTriggeringWithHttpInfo($set_triggering_request = null, string $contentType = self::contentTypes['setTriggering'][0])
    {
        $request = $this->setTriggeringRequest($set_triggering_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation setTriggeringAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetTriggeringRequest|null $set_triggering_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.5/#5.13.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTriggering'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setTriggeringAsync($set_triggering_request = null, string $contentType = self::contentTypes['setTriggering'][0])
    {
        return $this->setTriggeringAsyncWithHttpInfo($set_triggering_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setTriggeringAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetTriggeringRequest|null $set_triggering_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.5/#5.13.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTriggering'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setTriggeringAsyncWithHttpInfo($set_triggering_request = null, string $contentType = self::contentTypes['setTriggering'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\SetTriggeringResponse';
        $request = $this->setTriggeringRequest($set_triggering_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setTriggering'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\SetTriggeringRequest|null $set_triggering_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.13.5/#5.13.5.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTriggering'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setTriggeringRequest($set_triggering_request = null, string $contentType = self::contentTypes['setTriggering'][0])
    {



        $resourcePath = '/settriggering';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_triggering_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_triggering_request));
            } else {
                $httpBody = $set_triggering_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferSubscriptions
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsRequest|null $transfer_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.7/#5.14.7.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferSubscriptions'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse
     */
    public function transferSubscriptions($transfer_subscriptions_request = null, string $contentType = self::contentTypes['transferSubscriptions'][0])
    {
        list($response) = $this->transferSubscriptionsWithHttpInfo($transfer_subscriptions_request, $contentType);
        return $response;
    }

    /**
     * Operation transferSubscriptionsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsRequest|null $transfer_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.7/#5.14.7.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferSubscriptions'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferSubscriptionsWithHttpInfo($transfer_subscriptions_request = null, string $contentType = self::contentTypes['transferSubscriptions'][0])
    {
        $request = $this->transferSubscriptionsRequest($transfer_subscriptions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation transferSubscriptionsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsRequest|null $transfer_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.7/#5.14.7.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferSubscriptionsAsync($transfer_subscriptions_request = null, string $contentType = self::contentTypes['transferSubscriptions'][0])
    {
        return $this->transferSubscriptionsAsyncWithHttpInfo($transfer_subscriptions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferSubscriptionsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsRequest|null $transfer_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.7/#5.14.7.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferSubscriptionsAsyncWithHttpInfo($transfer_subscriptions_request = null, string $contentType = self::contentTypes['transferSubscriptions'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsResponse';
        $request = $this->transferSubscriptionsRequest($transfer_subscriptions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferSubscriptions'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TransferSubscriptionsRequest|null $transfer_subscriptions_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.14.7/#5.14.7.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferSubscriptionsRequest($transfer_subscriptions_request = null, string $contentType = self::contentTypes['transferSubscriptions'][0])
    {



        $resourcePath = '/transfersubscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transfer_subscriptions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transfer_subscriptions_request));
            } else {
                $httpBody = $transfer_subscriptions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation translateBrowsePathsToNodeIds
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsRequest|null $translate_browse_paths_to_node_ids_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.4/#5.9.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateBrowsePathsToNodeIds'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse
     */
    public function translateBrowsePathsToNodeIds($translate_browse_paths_to_node_ids_request = null, string $contentType = self::contentTypes['translateBrowsePathsToNodeIds'][0])
    {
        list($response) = $this->translateBrowsePathsToNodeIdsWithHttpInfo($translate_browse_paths_to_node_ids_request, $contentType);
        return $response;
    }

    /**
     * Operation translateBrowsePathsToNodeIdsWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsRequest|null $translate_browse_paths_to_node_ids_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.4/#5.9.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateBrowsePathsToNodeIds'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function translateBrowsePathsToNodeIdsWithHttpInfo($translate_browse_paths_to_node_ids_request = null, string $contentType = self::contentTypes['translateBrowsePathsToNodeIds'][0])
    {
        $request = $this->translateBrowsePathsToNodeIdsRequest($translate_browse_paths_to_node_ids_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation translateBrowsePathsToNodeIdsAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsRequest|null $translate_browse_paths_to_node_ids_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.4/#5.9.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateBrowsePathsToNodeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateBrowsePathsToNodeIdsAsync($translate_browse_paths_to_node_ids_request = null, string $contentType = self::contentTypes['translateBrowsePathsToNodeIds'][0])
    {
        return $this->translateBrowsePathsToNodeIdsAsyncWithHttpInfo($translate_browse_paths_to_node_ids_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation translateBrowsePathsToNodeIdsAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsRequest|null $translate_browse_paths_to_node_ids_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.4/#5.9.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateBrowsePathsToNodeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function translateBrowsePathsToNodeIdsAsyncWithHttpInfo($translate_browse_paths_to_node_ids_request = null, string $contentType = self::contentTypes['translateBrowsePathsToNodeIds'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsResponse';
        $request = $this->translateBrowsePathsToNodeIdsRequest($translate_browse_paths_to_node_ids_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'translateBrowsePathsToNodeIds'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\TranslateBrowsePathsToNodeIdsRequest|null $translate_browse_paths_to_node_ids_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.4/#5.9.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['translateBrowsePathsToNodeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function translateBrowsePathsToNodeIdsRequest($translate_browse_paths_to_node_ids_request = null, string $contentType = self::contentTypes['translateBrowsePathsToNodeIds'][0])
    {



        $resourcePath = '/translate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($translate_browse_paths_to_node_ids_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($translate_browse_paths_to_node_ids_request));
            } else {
                $httpBody = $translate_browse_paths_to_node_ids_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unregisterNodes
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\UnregisterNodesRequest|null $unregister_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.6/#5.9.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unregisterNodes'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse
     */
    public function unregisterNodes($unregister_nodes_request = null, string $contentType = self::contentTypes['unregisterNodes'][0])
    {
        list($response) = $this->unregisterNodesWithHttpInfo($unregister_nodes_request, $contentType);
        return $response;
    }

    /**
     * Operation unregisterNodesWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\UnregisterNodesRequest|null $unregister_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.6/#5.9.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unregisterNodes'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function unregisterNodesWithHttpInfo($unregister_nodes_request = null, string $contentType = self::contentTypes['unregisterNodes'][0])
    {
        $request = $this->unregisterNodesRequest($unregister_nodes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation unregisterNodesAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\UnregisterNodesRequest|null $unregister_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.6/#5.9.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unregisterNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterNodesAsync($unregister_nodes_request = null, string $contentType = self::contentTypes['unregisterNodes'][0])
    {
        return $this->unregisterNodesAsyncWithHttpInfo($unregister_nodes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unregisterNodesAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\UnregisterNodesRequest|null $unregister_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.6/#5.9.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unregisterNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unregisterNodesAsyncWithHttpInfo($unregister_nodes_request = null, string $contentType = self::contentTypes['unregisterNodes'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\UnregisterNodesResponse';
        $request = $this->unregisterNodesRequest($unregister_nodes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unregisterNodes'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\UnregisterNodesRequest|null $unregister_nodes_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.9.6/#5.9.6.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unregisterNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unregisterNodesRequest($unregister_nodes_request = null, string $contentType = self::contentTypes['unregisterNodes'][0])
    {



        $resourcePath = '/unregisternodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unregister_nodes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unregister_nodes_request));
            } else {
                $httpBody = $unregister_nodes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation write
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\WriteRequest|null $write_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.4/#5.11.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['write'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \TechDock\OpcUaWebApiClient\Model\WriteResponse
     */
    public function write($write_request = null, string $contentType = self::contentTypes['write'][0])
    {
        list($response) = $this->writeWithHttpInfo($write_request, $contentType);
        return $response;
    }

    /**
     * Operation writeWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\WriteRequest|null $write_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.4/#5.11.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['write'] to see the possible values for this operation
     *
     * @throws \TechDock\OpcUaWebApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \TechDock\OpcUaWebApiClient\Model\WriteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function writeWithHttpInfo($write_request = null, string $contentType = self::contentTypes['write'][0])
    {
        $request = $this->writeRequest($write_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\TechDock\OpcUaWebApiClient\Model\WriteResponse',
                        $request,
                        $response,
                    );
            }



            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\TechDock\OpcUaWebApiClient\Model\WriteResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TechDock\OpcUaWebApiClient\Model\WriteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }


            throw $e;
        }
    }

    /**
     * Operation writeAsync
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\WriteRequest|null $write_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.4/#5.11.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['write'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writeAsync($write_request = null, string $contentType = self::contentTypes['write'][0])
    {
        return $this->writeAsyncWithHttpInfo($write_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation writeAsyncWithHttpInfo
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\WriteRequest|null $write_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.4/#5.11.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['write'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function writeAsyncWithHttpInfo($write_request = null, string $contentType = self::contentTypes['write'][0])
    {
        $returnType = '\TechDock\OpcUaWebApiClient\Model\WriteResponse';
        $request = $this->writeRequest($write_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'write'
     *
     * @param  \TechDock\OpcUaWebApiClient\Model\WriteRequest|null $write_request [Link to specification](https://reference.opcfoundation.org/v105/Core/docs/Part4/5.11.4/#5.11.4.2). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['write'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function writeRequest($write_request = null, string $contentType = self::contentTypes['write'][0])
    {



        $resourcePath = '/write';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($write_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($write_request));
            } else {
                $httpBody = $write_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
